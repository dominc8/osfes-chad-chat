
usrt_cmd_good.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b8c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08005d8c  08005d8c  00015d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005da8  08005da8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005da8  08005da8  00015da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005db0  08005db0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005db0  08005db0  00015db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005db4  08005db4  00015db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ecc  2000000c  08005dc4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ed8  08005dc4  00020ed8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022a33  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003961  00000000  00000000  00042a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a48  00000000  00000000  000463d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001880  00000000  00000000  00047e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036770  00000000  00000000  00049698  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017ba9  00000000  00000000  0007fe08  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0015004f  00000000  00000000  000979b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e7a00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f0c  00000000  00000000  001e7a7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000000c 	.word	0x2000000c
 800021c:	00000000 	.word	0x00000000
 8000220:	08005d74 	.word	0x08005d74

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000010 	.word	0x20000010
 800023c:	08005d74 	.word	0x08005d74

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b972 	b.w	800054c <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9e08      	ldr	r6, [sp, #32]
 8000286:	4604      	mov	r4, r0
 8000288:	4688      	mov	r8, r1
 800028a:	2b00      	cmp	r3, #0
 800028c:	d14b      	bne.n	8000326 <__udivmoddi4+0xa6>
 800028e:	428a      	cmp	r2, r1
 8000290:	4615      	mov	r5, r2
 8000292:	d967      	bls.n	8000364 <__udivmoddi4+0xe4>
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	b14a      	cbz	r2, 80002ae <__udivmoddi4+0x2e>
 800029a:	f1c2 0720 	rsb	r7, r2, #32
 800029e:	fa01 f302 	lsl.w	r3, r1, r2
 80002a2:	fa20 f707 	lsr.w	r7, r0, r7
 80002a6:	4095      	lsls	r5, r2
 80002a8:	ea47 0803 	orr.w	r8, r7, r3
 80002ac:	4094      	lsls	r4, r2
 80002ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002b2:	0c23      	lsrs	r3, r4, #16
 80002b4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002b8:	fa1f fc85 	uxth.w	ip, r5
 80002bc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002c0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002c4:	fb07 f10c 	mul.w	r1, r7, ip
 80002c8:	4299      	cmp	r1, r3
 80002ca:	d909      	bls.n	80002e0 <__udivmoddi4+0x60>
 80002cc:	18eb      	adds	r3, r5, r3
 80002ce:	f107 30ff 	add.w	r0, r7, #4294967295
 80002d2:	f080 811b 	bcs.w	800050c <__udivmoddi4+0x28c>
 80002d6:	4299      	cmp	r1, r3
 80002d8:	f240 8118 	bls.w	800050c <__udivmoddi4+0x28c>
 80002dc:	3f02      	subs	r7, #2
 80002de:	442b      	add	r3, r5
 80002e0:	1a5b      	subs	r3, r3, r1
 80002e2:	b2a4      	uxth	r4, r4
 80002e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002f4:	45a4      	cmp	ip, r4
 80002f6:	d909      	bls.n	800030c <__udivmoddi4+0x8c>
 80002f8:	192c      	adds	r4, r5, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fe:	f080 8107 	bcs.w	8000510 <__udivmoddi4+0x290>
 8000302:	45a4      	cmp	ip, r4
 8000304:	f240 8104 	bls.w	8000510 <__udivmoddi4+0x290>
 8000308:	3802      	subs	r0, #2
 800030a:	442c      	add	r4, r5
 800030c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000310:	eba4 040c 	sub.w	r4, r4, ip
 8000314:	2700      	movs	r7, #0
 8000316:	b11e      	cbz	r6, 8000320 <__udivmoddi4+0xa0>
 8000318:	40d4      	lsrs	r4, r2
 800031a:	2300      	movs	r3, #0
 800031c:	e9c6 4300 	strd	r4, r3, [r6]
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0xbe>
 800032a:	2e00      	cmp	r6, #0
 800032c:	f000 80eb 	beq.w	8000506 <__udivmoddi4+0x286>
 8000330:	2700      	movs	r7, #0
 8000332:	e9c6 0100 	strd	r0, r1, [r6]
 8000336:	4638      	mov	r0, r7
 8000338:	4639      	mov	r1, r7
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f783 	clz	r7, r3
 8000342:	2f00      	cmp	r7, #0
 8000344:	d147      	bne.n	80003d6 <__udivmoddi4+0x156>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0xd0>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80fa 	bhi.w	8000544 <__udivmoddi4+0x2c4>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0303 	sbc.w	r3, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	4698      	mov	r8, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d0e0      	beq.n	8000320 <__udivmoddi4+0xa0>
 800035e:	e9c6 4800 	strd	r4, r8, [r6]
 8000362:	e7dd      	b.n	8000320 <__udivmoddi4+0xa0>
 8000364:	b902      	cbnz	r2, 8000368 <__udivmoddi4+0xe8>
 8000366:	deff      	udf	#255	; 0xff
 8000368:	fab2 f282 	clz	r2, r2
 800036c:	2a00      	cmp	r2, #0
 800036e:	f040 808f 	bne.w	8000490 <__udivmoddi4+0x210>
 8000372:	1b49      	subs	r1, r1, r5
 8000374:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000378:	fa1f f885 	uxth.w	r8, r5
 800037c:	2701      	movs	r7, #1
 800037e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fb0e 111c 	mls	r1, lr, ip, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb08 f10c 	mul.w	r1, r8, ip
 8000390:	4299      	cmp	r1, r3
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x124>
 8000394:	18eb      	adds	r3, r5, r3
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x122>
 800039c:	4299      	cmp	r1, r3
 800039e:	f200 80cd 	bhi.w	800053c <__udivmoddi4+0x2bc>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1410 	mls	r4, lr, r0, r1
 80003b0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x14c>
 80003bc:	192c      	adds	r4, r5, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x14a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80b6 	bhi.w	8000536 <__udivmoddi4+0x2b6>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e79f      	b.n	8000316 <__udivmoddi4+0x96>
 80003d6:	f1c7 0c20 	rsb	ip, r7, #32
 80003da:	40bb      	lsls	r3, r7
 80003dc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003e0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003e4:	fa01 f407 	lsl.w	r4, r1, r7
 80003e8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ec:	fa21 f30c 	lsr.w	r3, r1, ip
 80003f0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003f4:	4325      	orrs	r5, r4
 80003f6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003fa:	0c2c      	lsrs	r4, r5, #16
 80003fc:	fb08 3319 	mls	r3, r8, r9, r3
 8000400:	fa1f fa8e 	uxth.w	sl, lr
 8000404:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000408:	fb09 f40a 	mul.w	r4, r9, sl
 800040c:	429c      	cmp	r4, r3
 800040e:	fa02 f207 	lsl.w	r2, r2, r7
 8000412:	fa00 f107 	lsl.w	r1, r0, r7
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b0>
 8000418:	eb1e 0303 	adds.w	r3, lr, r3
 800041c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000420:	f080 8087 	bcs.w	8000532 <__udivmoddi4+0x2b2>
 8000424:	429c      	cmp	r4, r3
 8000426:	f240 8084 	bls.w	8000532 <__udivmoddi4+0x2b2>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4473      	add	r3, lr
 8000430:	1b1b      	subs	r3, r3, r4
 8000432:	b2ad      	uxth	r5, r5
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3310 	mls	r3, r8, r0, r3
 800043c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000440:	fb00 fa0a 	mul.w	sl, r0, sl
 8000444:	45a2      	cmp	sl, r4
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1da>
 8000448:	eb1e 0404 	adds.w	r4, lr, r4
 800044c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000450:	d26b      	bcs.n	800052a <__udivmoddi4+0x2aa>
 8000452:	45a2      	cmp	sl, r4
 8000454:	d969      	bls.n	800052a <__udivmoddi4+0x2aa>
 8000456:	3802      	subs	r0, #2
 8000458:	4474      	add	r4, lr
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	fba0 8902 	umull	r8, r9, r0, r2
 8000462:	eba4 040a 	sub.w	r4, r4, sl
 8000466:	454c      	cmp	r4, r9
 8000468:	46c2      	mov	sl, r8
 800046a:	464b      	mov	r3, r9
 800046c:	d354      	bcc.n	8000518 <__udivmoddi4+0x298>
 800046e:	d051      	beq.n	8000514 <__udivmoddi4+0x294>
 8000470:	2e00      	cmp	r6, #0
 8000472:	d069      	beq.n	8000548 <__udivmoddi4+0x2c8>
 8000474:	ebb1 050a 	subs.w	r5, r1, sl
 8000478:	eb64 0403 	sbc.w	r4, r4, r3
 800047c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000480:	40fd      	lsrs	r5, r7
 8000482:	40fc      	lsrs	r4, r7
 8000484:	ea4c 0505 	orr.w	r5, ip, r5
 8000488:	e9c6 5400 	strd	r5, r4, [r6]
 800048c:	2700      	movs	r7, #0
 800048e:	e747      	b.n	8000320 <__udivmoddi4+0xa0>
 8000490:	f1c2 0320 	rsb	r3, r2, #32
 8000494:	fa20 f703 	lsr.w	r7, r0, r3
 8000498:	4095      	lsls	r5, r2
 800049a:	fa01 f002 	lsl.w	r0, r1, r2
 800049e:	fa21 f303 	lsr.w	r3, r1, r3
 80004a2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a6:	4338      	orrs	r0, r7
 80004a8:	0c01      	lsrs	r1, r0, #16
 80004aa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ae:	fa1f f885 	uxth.w	r8, r5
 80004b2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ba:	fb07 f308 	mul.w	r3, r7, r8
 80004be:	428b      	cmp	r3, r1
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x256>
 80004c6:	1869      	adds	r1, r5, r1
 80004c8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004cc:	d22f      	bcs.n	800052e <__udivmoddi4+0x2ae>
 80004ce:	428b      	cmp	r3, r1
 80004d0:	d92d      	bls.n	800052e <__udivmoddi4+0x2ae>
 80004d2:	3f02      	subs	r7, #2
 80004d4:	4429      	add	r1, r5
 80004d6:	1acb      	subs	r3, r1, r3
 80004d8:	b281      	uxth	r1, r0
 80004da:	fbb3 f0fe 	udiv	r0, r3, lr
 80004de:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e6:	fb00 f308 	mul.w	r3, r0, r8
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d907      	bls.n	80004fe <__udivmoddi4+0x27e>
 80004ee:	1869      	adds	r1, r5, r1
 80004f0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004f4:	d217      	bcs.n	8000526 <__udivmoddi4+0x2a6>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d915      	bls.n	8000526 <__udivmoddi4+0x2a6>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4429      	add	r1, r5
 80004fe:	1ac9      	subs	r1, r1, r3
 8000500:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000504:	e73b      	b.n	800037e <__udivmoddi4+0xfe>
 8000506:	4637      	mov	r7, r6
 8000508:	4630      	mov	r0, r6
 800050a:	e709      	b.n	8000320 <__udivmoddi4+0xa0>
 800050c:	4607      	mov	r7, r0
 800050e:	e6e7      	b.n	80002e0 <__udivmoddi4+0x60>
 8000510:	4618      	mov	r0, r3
 8000512:	e6fb      	b.n	800030c <__udivmoddi4+0x8c>
 8000514:	4541      	cmp	r1, r8
 8000516:	d2ab      	bcs.n	8000470 <__udivmoddi4+0x1f0>
 8000518:	ebb8 0a02 	subs.w	sl, r8, r2
 800051c:	eb69 020e 	sbc.w	r2, r9, lr
 8000520:	3801      	subs	r0, #1
 8000522:	4613      	mov	r3, r2
 8000524:	e7a4      	b.n	8000470 <__udivmoddi4+0x1f0>
 8000526:	4660      	mov	r0, ip
 8000528:	e7e9      	b.n	80004fe <__udivmoddi4+0x27e>
 800052a:	4618      	mov	r0, r3
 800052c:	e795      	b.n	800045a <__udivmoddi4+0x1da>
 800052e:	4667      	mov	r7, ip
 8000530:	e7d1      	b.n	80004d6 <__udivmoddi4+0x256>
 8000532:	4681      	mov	r9, r0
 8000534:	e77c      	b.n	8000430 <__udivmoddi4+0x1b0>
 8000536:	3802      	subs	r0, #2
 8000538:	442c      	add	r4, r5
 800053a:	e747      	b.n	80003cc <__udivmoddi4+0x14c>
 800053c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000540:	442b      	add	r3, r5
 8000542:	e72f      	b.n	80003a4 <__udivmoddi4+0x124>
 8000544:	4638      	mov	r0, r7
 8000546:	e708      	b.n	800035a <__udivmoddi4+0xda>
 8000548:	4637      	mov	r7, r6
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0xa0>

0800054c <__aeabi_idiv0>:
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
	...

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b09a      	sub	sp, #104	; 0x68
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fd62 	bl	8001036 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f82d 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f92d 	bl	80007d4 <MX_GPIO_Init>
  MX_UART5_Init();
  MX_USART6_UART_Init();
  MX_USB_OTG_HS_PCD_Init();
  MX_WWDG_Init();
  */
  MX_USART1_UART_Init();
 800057a:	f000 f8fb 	bl	8000774 <MX_USART1_UART_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t buf[100];
  UartInit();
 800057e:	f000 fcab 	bl	8000ed8 <UartInit>
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_SET);
 8000582:	2201      	movs	r2, #1
 8000584:	2120      	movs	r1, #32
 8000586:	4810      	ldr	r0, [pc, #64]	; (80005c8 <main+0x60>)
 8000588:	f001 fb52 	bl	8001c30 <HAL_GPIO_WritePin>
  while (1)
  {
	  if(UartReadCommand(buf)){
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	4618      	mov	r0, r3
 8000590:	f000 fcc4 	bl	8000f1c <UartReadCommand>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d00d      	beq.n	80005b6 <main+0x4e>
		  UartWriteCommand("\n", strlen("\n"));
 800059a:	2101      	movs	r1, #1
 800059c:	480b      	ldr	r0, [pc, #44]	; (80005cc <main+0x64>)
 800059e:	f000 fca9 	bl	8000ef4 <UartWriteCommand>
		  UartWriteCommand(buf,strlen(buf));
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff fe4b 	bl	8000240 <strlen>
 80005aa:	4602      	mov	r2, r0
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	4611      	mov	r1, r2
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fc9f 	bl	8000ef4 <UartWriteCommand>
	  }
	  HAL_GPIO_TogglePin(GPIOJ, GPIO_PIN_5);
 80005b6:	2120      	movs	r1, #32
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <main+0x60>)
 80005ba:	f001 fb52 	bl	8001c62 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80005be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c2:	f000 fd65 	bl	8001090 <HAL_Delay>
	  if(UartReadCommand(buf)){
 80005c6:	e7e1      	b.n	800058c <main+0x24>
 80005c8:	40022400 	.word	0x40022400
 80005cc:	08005d8c 	.word	0x08005d8c

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b0b8      	sub	sp, #224	; 0xe0
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005da:	2234      	movs	r2, #52	; 0x34
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f005 fbb8 	bl	8005d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2290      	movs	r2, #144	; 0x90
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f005 fba9 	bl	8005d54 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000602:	f002 fa4b 	bl	8002a9c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000606:	4b58      	ldr	r3, [pc, #352]	; (8000768 <SystemClock_Config+0x198>)
 8000608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060a:	4a57      	ldr	r2, [pc, #348]	; (8000768 <SystemClock_Config+0x198>)
 800060c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000610:	6413      	str	r3, [r2, #64]	; 0x40
 8000612:	4b55      	ldr	r3, [pc, #340]	; (8000768 <SystemClock_Config+0x198>)
 8000614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061e:	4b53      	ldr	r3, [pc, #332]	; (800076c <SystemClock_Config+0x19c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a52      	ldr	r2, [pc, #328]	; (800076c <SystemClock_Config+0x19c>)
 8000624:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000628:	6013      	str	r3, [r2, #0]
 800062a:	4b50      	ldr	r3, [pc, #320]	; (800076c <SystemClock_Config+0x19c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000636:	230b      	movs	r3, #11
 8000638:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800063c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000640:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064a:	2310      	movs	r3, #16
 800064c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000660:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000664:	2319      	movs	r3, #25
 8000666:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 800066a:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800066e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000672:	2302      	movs	r3, #2
 8000674:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000678:	2304      	movs	r3, #4
 800067a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000682:	4618      	mov	r0, r3
 8000684:	f002 fa6a 	bl	8002b5c <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800068e:	f000 fa07 	bl	8000aa0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000692:	f002 fa13 	bl	8002abc <HAL_PWREx_EnableOverDrive>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800069c:	f000 fa00 	bl	8000aa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a6:	2302      	movs	r3, #2
 80006a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006c6:	2107      	movs	r1, #7
 80006c8:	4618      	mov	r0, r3
 80006ca:	f002 fcf5 	bl	80030b8 <HAL_RCC_ClockConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x108>
  {
    Error_Handler();
 80006d4:	f000 f9e4 	bl	8000aa0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80006d8:	4b25      	ldr	r3, [pc, #148]	; (8000770 <SystemClock_Config+0x1a0>)
 80006da:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_UART5
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_SDMMC2|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_CEC;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80006dc:	23c0      	movs	r3, #192	; 0xc0
 80006de:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80006ec:	23c0      	movs	r3, #192	; 0xc0
 80006ee:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 80006f4:	2303      	movs	r3, #3
 80006f6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000700:	2301      	movs	r3, #1
 8000702:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000704:	2300      	movs	r3, #0
 8000706:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800070c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 800070e:	2300      	movs	r3, #0
 8000710:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000712:	2300      	movs	r3, #0
 8000714:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000716:	2300      	movs	r3, #0
 8000718:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800071a:	2300      	movs	r3, #0
 800071c:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800071e:	2300      	movs	r3, #0
 8000720:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000722:	2300      	movs	r3, #0
 8000724:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000726:	2300      	movs	r3, #0
 8000728:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_HSI;
 800072a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800072e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000732:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000736:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 800073a:	2300      	movs	r3, #0
 800073c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	4618      	mov	r0, r3
 8000746:	f002 ff1f 	bl	8003588 <HAL_RCCEx_PeriphCLKConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x184>
  {
    Error_Handler();
 8000750:	f000 f9a6 	bl	8000aa0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000754:	2200      	movs	r2, #0
 8000756:	2100      	movs	r1, #0
 8000758:	2000      	movs	r0, #0
 800075a:	f002 fd99 	bl	8003290 <HAL_RCC_MCOConfig>
}
 800075e:	bf00      	nop
 8000760:	37e0      	adds	r7, #224	; 0xe0
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000
 8000770:	057a4c68 	.word	0x057a4c68

08000774 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_USART1_UART_Init+0x58>)
 800077a:	4a15      	ldr	r2, [pc, #84]	; (80007d0 <MX_USART1_UART_Init+0x5c>)
 800077c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_USART1_UART_Init+0x58>)
 8000780:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000784:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_USART1_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_USART1_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USART1_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_USART1_UART_Init+0x58>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_USART1_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_USART1_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_USART1_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_USART1_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_USART1_UART_Init+0x58>)
 80007b8:	f003 fd68 	bl	800428c <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007c2:	f000 f96d 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000a80 	.word	0x20000a80
 80007d0:	40011000 	.word	0x40011000

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b090      	sub	sp, #64	; 0x40
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ea:	4b99      	ldr	r3, [pc, #612]	; (8000a50 <MX_GPIO_Init+0x27c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a98      	ldr	r2, [pc, #608]	; (8000a50 <MX_GPIO_Init+0x27c>)
 80007f0:	f043 0310 	orr.w	r3, r3, #16
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b96      	ldr	r3, [pc, #600]	; (8000a50 <MX_GPIO_Init+0x27c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0310 	and.w	r3, r3, #16
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8000800:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000802:	4b93      	ldr	r3, [pc, #588]	; (8000a50 <MX_GPIO_Init+0x27c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a92      	ldr	r2, [pc, #584]	; (8000a50 <MX_GPIO_Init+0x27c>)
 8000808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b90      	ldr	r3, [pc, #576]	; (8000a50 <MX_GPIO_Init+0x27c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
 8000818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	4b8d      	ldr	r3, [pc, #564]	; (8000a50 <MX_GPIO_Init+0x27c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a8c      	ldr	r2, [pc, #560]	; (8000a50 <MX_GPIO_Init+0x27c>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b8a      	ldr	r3, [pc, #552]	; (8000a50 <MX_GPIO_Init+0x27c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	623b      	str	r3, [r7, #32]
 8000830:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	4b87      	ldr	r3, [pc, #540]	; (8000a50 <MX_GPIO_Init+0x27c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a86      	ldr	r2, [pc, #536]	; (8000a50 <MX_GPIO_Init+0x27c>)
 8000838:	f043 0308 	orr.w	r3, r3, #8
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b84      	ldr	r3, [pc, #528]	; (8000a50 <MX_GPIO_Init+0x27c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0308 	and.w	r3, r3, #8
 8000846:	61fb      	str	r3, [r7, #28]
 8000848:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	4b81      	ldr	r3, [pc, #516]	; (8000a50 <MX_GPIO_Init+0x27c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a80      	ldr	r2, [pc, #512]	; (8000a50 <MX_GPIO_Init+0x27c>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b7e      	ldr	r3, [pc, #504]	; (8000a50 <MX_GPIO_Init+0x27c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	61bb      	str	r3, [r7, #24]
 8000860:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b7b      	ldr	r3, [pc, #492]	; (8000a50 <MX_GPIO_Init+0x27c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a7a      	ldr	r2, [pc, #488]	; (8000a50 <MX_GPIO_Init+0x27c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b78      	ldr	r3, [pc, #480]	; (8000a50 <MX_GPIO_Init+0x27c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800087a:	4b75      	ldr	r3, [pc, #468]	; (8000a50 <MX_GPIO_Init+0x27c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a74      	ldr	r2, [pc, #464]	; (8000a50 <MX_GPIO_Init+0x27c>)
 8000880:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b72      	ldr	r3, [pc, #456]	; (8000a50 <MX_GPIO_Init+0x27c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000892:	4b6f      	ldr	r3, [pc, #444]	; (8000a50 <MX_GPIO_Init+0x27c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a6e      	ldr	r2, [pc, #440]	; (8000a50 <MX_GPIO_Init+0x27c>)
 8000898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b6c      	ldr	r3, [pc, #432]	; (8000a50 <MX_GPIO_Init+0x27c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80008aa:	4b69      	ldr	r3, [pc, #420]	; (8000a50 <MX_GPIO_Init+0x27c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a68      	ldr	r2, [pc, #416]	; (8000a50 <MX_GPIO_Init+0x27c>)
 80008b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b66      	ldr	r3, [pc, #408]	; (8000a50 <MX_GPIO_Init+0x27c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008c2:	4b63      	ldr	r3, [pc, #396]	; (8000a50 <MX_GPIO_Init+0x27c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a62      	ldr	r2, [pc, #392]	; (8000a50 <MX_GPIO_Init+0x27c>)
 80008c8:	f043 0320 	orr.w	r3, r3, #32
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b60      	ldr	r3, [pc, #384]	; (8000a50 <MX_GPIO_Init+0x27c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0320 	and.w	r3, r3, #32
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	4b5d      	ldr	r3, [pc, #372]	; (8000a50 <MX_GPIO_Init+0x27c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a5c      	ldr	r2, [pc, #368]	; (8000a50 <MX_GPIO_Init+0x27c>)
 80008e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b5a      	ldr	r3, [pc, #360]	; (8000a50 <MX_GPIO_Init+0x27c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_13|DSI_RESET_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f24a 0120 	movw	r1, #40992	; 0xa020
 80008f8:	4856      	ldr	r0, [pc, #344]	; (8000a54 <MX_GPIO_Init+0x280>)
 80008fa:	f001 f999 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PJ13 DSI_RESET_Pin PJ5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|DSI_RESET_Pin|GPIO_PIN_5;
 80008fe:	f24a 0320 	movw	r3, #40992	; 0xa020
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000910:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000914:	4619      	mov	r1, r3
 8000916:	484f      	ldr	r0, [pc, #316]	; (8000a54 <MX_GPIO_Init+0x280>)
 8000918:	f000 ffe0 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_INT_Pin WIFI_RST_Pin ARD_D8_Pin ARD_D7_Pin
                           ARD_D4_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin|WIFI_RST_Pin|ARD_D8_Pin|ARD_D7_Pin
 800091c:	f245 031b 	movw	r3, #20507	; 0x501b
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800092a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800092e:	4619      	mov	r1, r3
 8000930:	4848      	ldr	r0, [pc, #288]	; (8000a54 <MX_GPIO_Init+0x280>)
 8000932:	f000 ffd3 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN5_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin;
 8000936:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000948:	2303      	movs	r3, #3
 800094a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_DATIN5_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000950:	4619      	mov	r1, r3
 8000952:	4841      	ldr	r0, [pc, #260]	; (8000a58 <MX_GPIO_Init+0x284>)
 8000954:	f000 ffc2 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pins : NC4_Pin NC5_Pin uSD_Detect_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin|LCD_BL_CTRL_Pin;
 8000958:	f44f 4351 	mov.w	r3, #53504	; 0xd100
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000966:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800096a:	4619      	mov	r1, r3
 800096c:	483b      	ldr	r0, [pc, #236]	; (8000a5c <MX_GPIO_Init+0x288>)
 800096e:	f000 ffb5 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pins : NC3_Pin NC2_Pin NC1_Pin NC8_Pin
                           NC7_Pin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin
 8000972:	23f8      	movs	r3, #248	; 0xf8
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800097e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000982:	4619      	mov	r1, r3
 8000984:	4836      	ldr	r0, [pc, #216]	; (8000a60 <MX_GPIO_Init+0x28c>)
 8000986:	f000 ffa9 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXER_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 800098a:	2330      	movs	r3, #48	; 0x30
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098e:	2300      	movs	r3, #0
 8000990:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000996:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800099a:	4619      	mov	r1, r3
 800099c:	4831      	ldr	r0, [pc, #196]	; (8000a64 <MX_GPIO_Init+0x290>)
 800099e:	f000 ff9d 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 80009a2:	2308      	movs	r3, #8
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80009b2:	2303      	movs	r3, #3
 80009b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009ba:	4619      	mov	r1, r3
 80009bc:	4829      	ldr	r0, [pc, #164]	; (8000a64 <MX_GPIO_Init+0x290>)
 80009be:	f000 ff8d 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CLK_Pin */
  GPIO_InitStruct.Pin = CEC_CLK_Pin;
 80009c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80009d4:	2300      	movs	r3, #0
 80009d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009dc:	4619      	mov	r1, r3
 80009de:	4822      	ldr	r0, [pc, #136]	; (8000a68 <MX_GPIO_Init+0x294>)
 80009e0:	f000 ff7c 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80009e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ea:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <MX_GPIO_Init+0x298>)
 80009ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009f6:	4619      	mov	r1, r3
 80009f8:	4818      	ldr	r0, [pc, #96]	; (8000a5c <MX_GPIO_Init+0x288>)
 80009fa:	f000 ff6f 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_SDA_Pin EXT_SCL_Pin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 80009fe:	2348      	movs	r3, #72	; 0x48
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a02:	2300      	movs	r3, #0
 8000a04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4817      	ldr	r0, [pc, #92]	; (8000a70 <MX_GPIO_Init+0x29c>)
 8000a12:	f000 ff63 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8000a16:	2301      	movs	r3, #1
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <MX_GPIO_Init+0x2a0>)
 8000a1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a26:	4619      	mov	r1, r3
 8000a28:	480f      	ldr	r0, [pc, #60]	; (8000a68 <MX_GPIO_Init+0x294>)
 8000a2a:	f000 ff57 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a2e:	2380      	movs	r3, #128	; 0x80
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a32:	2300      	movs	r3, #0
 8000a34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480d      	ldr	r0, [pc, #52]	; (8000a78 <MX_GPIO_Init+0x2a4>)
 8000a42:	f000 ff4b 	bl	80018dc <HAL_GPIO_Init>

}
 8000a46:	bf00      	nop
 8000a48:	3740      	adds	r7, #64	; 0x40
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40022400 	.word	0x40022400
 8000a58:	40020800 	.word	0x40020800
 8000a5c:	40022000 	.word	0x40022000
 8000a60:	40022800 	.word	0x40022800
 8000a64:	40020c00 	.word	0x40020c00
 8000a68:	40020000 	.word	0x40020000
 8000a6c:	10120000 	.word	0x10120000
 8000a70:	40021800 	.word	0x40021800
 8000a74:	10110000 	.word	0x10110000
 8000a78:	40021c00 	.word	0x40021c00

08000a7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d101      	bne.n	8000a92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a8e:	f000 fadf 	bl	8001050 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40001000 	.word	0x40001000

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <Error_Handler+0x6>

08000aa8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	4a10      	ldr	r2, [pc, #64]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <HAL_MspInit+0x4c>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	210f      	movs	r1, #15
 8000ae2:	f06f 0001 	mvn.w	r0, #1
 8000ae6:	f000 fcb5 	bl	8001454 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800

08000af8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b087      	sub	sp, #28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a1c      	ldr	r2, [pc, #112]	; (8000b78 <HAL_TIM_Base_MspInit+0x80>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d10c      	bne.n	8000b24 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <HAL_TIM_Base_MspInit+0x84>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	4a1b      	ldr	r2, [pc, #108]	; (8000b7c <HAL_TIM_Base_MspInit+0x84>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6453      	str	r3, [r2, #68]	; 0x44
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <HAL_TIM_Base_MspInit+0x84>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000b22:	e022      	b.n	8000b6a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM10)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a15      	ldr	r2, [pc, #84]	; (8000b80 <HAL_TIM_Base_MspInit+0x88>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d10c      	bne.n	8000b48 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000b2e:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <HAL_TIM_Base_MspInit+0x84>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <HAL_TIM_Base_MspInit+0x84>)
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b38:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <HAL_TIM_Base_MspInit+0x84>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]
}
 8000b46:	e010      	b.n	8000b6a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM11)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <HAL_TIM_Base_MspInit+0x8c>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d10b      	bne.n	8000b6a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <HAL_TIM_Base_MspInit+0x84>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	4a09      	ldr	r2, [pc, #36]	; (8000b7c <HAL_TIM_Base_MspInit+0x84>)
 8000b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5e:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <HAL_TIM_Base_MspInit+0x84>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
}
 8000b6a:	bf00      	nop
 8000b6c:	371c      	adds	r7, #28
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40010000 	.word	0x40010000
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40014400 	.word	0x40014400
 8000b84:	40014800 	.word	0x40014800

08000b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08e      	sub	sp, #56	; 0x38
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a60      	ldr	r2, [pc, #384]	; (8000d28 <HAL_UART_MspInit+0x1a0>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d145      	bne.n	8000c36 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000baa:	4b60      	ldr	r3, [pc, #384]	; (8000d2c <HAL_UART_MspInit+0x1a4>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a5f      	ldr	r2, [pc, #380]	; (8000d2c <HAL_UART_MspInit+0x1a4>)
 8000bb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b5d      	ldr	r3, [pc, #372]	; (8000d2c <HAL_UART_MspInit+0x1a4>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bbe:	623b      	str	r3, [r7, #32]
 8000bc0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc2:	4b5a      	ldr	r3, [pc, #360]	; (8000d2c <HAL_UART_MspInit+0x1a4>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a59      	ldr	r2, [pc, #356]	; (8000d2c <HAL_UART_MspInit+0x1a4>)
 8000bc8:	f043 0304 	orr.w	r3, r3, #4
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b57      	ldr	r3, [pc, #348]	; (8000d2c <HAL_UART_MspInit+0x1a4>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0304 	and.w	r3, r3, #4
 8000bd6:	61fb      	str	r3, [r7, #28]
 8000bd8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bda:	4b54      	ldr	r3, [pc, #336]	; (8000d2c <HAL_UART_MspInit+0x1a4>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a53      	ldr	r2, [pc, #332]	; (8000d2c <HAL_UART_MspInit+0x1a4>)
 8000be0:	f043 0308 	orr.w	r3, r3, #8
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b51      	ldr	r3, [pc, #324]	; (8000d2c <HAL_UART_MspInit+0x1a4>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0308 	and.w	r3, r3, #8
 8000bee:	61bb      	str	r3, [r7, #24]
 8000bf0:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8000bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c04:	2308      	movs	r3, #8
 8000c06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4848      	ldr	r0, [pc, #288]	; (8000d30 <HAL_UART_MspInit+0x1a8>)
 8000c10:	f000 fe64 	bl	80018dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WIFI_TX_Pin;
 8000c14:	2304      	movs	r3, #4
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c24:	2308      	movs	r3, #8
 8000c26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4841      	ldr	r0, [pc, #260]	; (8000d34 <HAL_UART_MspInit+0x1ac>)
 8000c30:	f000 fe54 	bl	80018dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000c34:	e074      	b.n	8000d20 <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART1)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a3f      	ldr	r2, [pc, #252]	; (8000d38 <HAL_UART_MspInit+0x1b0>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d142      	bne.n	8000cc6 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c40:	4b3a      	ldr	r3, [pc, #232]	; (8000d2c <HAL_UART_MspInit+0x1a4>)
 8000c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c44:	4a39      	ldr	r2, [pc, #228]	; (8000d2c <HAL_UART_MspInit+0x1a4>)
 8000c46:	f043 0310 	orr.w	r3, r3, #16
 8000c4a:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4c:	4b37      	ldr	r3, [pc, #220]	; (8000d2c <HAL_UART_MspInit+0x1a4>)
 8000c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c50:	f003 0310 	and.w	r3, r3, #16
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c58:	4b34      	ldr	r3, [pc, #208]	; (8000d2c <HAL_UART_MspInit+0x1a4>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5c:	4a33      	ldr	r2, [pc, #204]	; (8000d2c <HAL_UART_MspInit+0x1a4>)
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	6313      	str	r3, [r2, #48]	; 0x30
 8000c64:	4b31      	ldr	r3, [pc, #196]	; (8000d2c <HAL_UART_MspInit+0x1a4>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c82:	2307      	movs	r3, #7
 8000c84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	482b      	ldr	r0, [pc, #172]	; (8000d3c <HAL_UART_MspInit+0x1b4>)
 8000c8e:	f000 fe25 	bl	80018dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000c92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ca4:	2307      	movs	r3, #7
 8000ca6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cac:	4619      	mov	r1, r3
 8000cae:	4823      	ldr	r0, [pc, #140]	; (8000d3c <HAL_UART_MspInit+0x1b4>)
 8000cb0:	f000 fe14 	bl	80018dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2105      	movs	r1, #5
 8000cb8:	2025      	movs	r0, #37	; 0x25
 8000cba:	f000 fbcb 	bl	8001454 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cbe:	2025      	movs	r0, #37	; 0x25
 8000cc0:	f000 fbe4 	bl	800148c <HAL_NVIC_EnableIRQ>
}
 8000cc4:	e02c      	b.n	8000d20 <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART6)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a1d      	ldr	r2, [pc, #116]	; (8000d40 <HAL_UART_MspInit+0x1b8>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d127      	bne.n	8000d20 <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <HAL_UART_MspInit+0x1a4>)
 8000cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd4:	4a15      	ldr	r2, [pc, #84]	; (8000d2c <HAL_UART_MspInit+0x1a4>)
 8000cd6:	f043 0320 	orr.w	r3, r3, #32
 8000cda:	6453      	str	r3, [r2, #68]	; 0x44
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <HAL_UART_MspInit+0x1a4>)
 8000cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce0:	f003 0320 	and.w	r3, r3, #32
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce8:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <HAL_UART_MspInit+0x1a4>)
 8000cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cec:	4a0f      	ldr	r2, [pc, #60]	; (8000d2c <HAL_UART_MspInit+0x1a4>)
 8000cee:	f043 0304 	orr.w	r3, r3, #4
 8000cf2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf4:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <HAL_UART_MspInit+0x1a4>)
 8000cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf8:	f003 0304 	and.w	r3, r3, #4
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 8000d00:	23c0      	movs	r3, #192	; 0xc0
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d10:	2308      	movs	r3, #8
 8000d12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <HAL_UART_MspInit+0x1a8>)
 8000d1c:	f000 fdde 	bl	80018dc <HAL_GPIO_Init>
}
 8000d20:	bf00      	nop
 8000d22:	3738      	adds	r7, #56	; 0x38
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40005000 	.word	0x40005000
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020800 	.word	0x40020800
 8000d34:	40020c00 	.word	0x40020c00
 8000d38:	40011000 	.word	0x40011000
 8000d3c:	40020000 	.word	0x40020000
 8000d40:	40011400 	.word	0x40011400

08000d44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08c      	sub	sp, #48	; 0x30
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d54:	2200      	movs	r2, #0
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	2036      	movs	r0, #54	; 0x36
 8000d5a:	f000 fb7b 	bl	8001454 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d5e:	2036      	movs	r0, #54	; 0x36
 8000d60:	f000 fb94 	bl	800148c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d64:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <HAL_InitTick+0xa0>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d68:	4a1e      	ldr	r2, [pc, #120]	; (8000de4 <HAL_InitTick+0xa0>)
 8000d6a:	f043 0310 	orr.w	r3, r3, #16
 8000d6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d70:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <HAL_InitTick+0xa0>)
 8000d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d74:	f003 0310 	and.w	r3, r3, #16
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d7c:	f107 0210 	add.w	r2, r7, #16
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4611      	mov	r1, r2
 8000d86:	4618      	mov	r0, r3
 8000d88:	f002 fbcc 	bl	8003524 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d8c:	f002 fba2 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 8000d90:	4603      	mov	r3, r0
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d98:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <HAL_InitTick+0xa4>)
 8000d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9e:	0c9b      	lsrs	r3, r3, #18
 8000da0:	3b01      	subs	r3, #1
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <HAL_InitTick+0xa8>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <HAL_InitTick+0xac>)
 8000da8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <HAL_InitTick+0xa8>)
 8000dac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000db0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000db2:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <HAL_InitTick+0xa8>)
 8000db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <HAL_InitTick+0xa8>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <HAL_InitTick+0xa8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000dc4:	4809      	ldr	r0, [pc, #36]	; (8000dec <HAL_InitTick+0xa8>)
 8000dc6:	f003 f805 	bl	8003dd4 <HAL_TIM_Base_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d104      	bne.n	8000dda <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000dd0:	4806      	ldr	r0, [pc, #24]	; (8000dec <HAL_InitTick+0xa8>)
 8000dd2:	f003 f82b 	bl	8003e2c <HAL_TIM_Base_Start_IT>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	e000      	b.n	8000ddc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3730      	adds	r7, #48	; 0x30
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40023800 	.word	0x40023800
 8000de8:	431bde83 	.word	0x431bde83
 8000dec:	20000e28 	.word	0x20000e28
 8000df0:	40001000 	.word	0x40001000

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <NMI_Handler+0x4>

08000dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <HardFault_Handler+0x4>

08000e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <MemManage_Handler+0x4>

08000e06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <BusFault_Handler+0x4>

08000e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <UsageFault_Handler+0x4>

08000e12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <USART1_IRQHandler+0x10>)
 8000e26:	f003 fc0f 	bl	8004648 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000a80 	.word	0x20000a80

08000e34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e38:	4802      	ldr	r0, [pc, #8]	; (8000e44 <TIM6_DAC_IRQHandler+0x10>)
 8000e3a:	f003 f821 	bl	8003e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000e28 	.word	0x20000e28

08000e48 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <OTG_HS_IRQHandler+0x10>)
 8000e4e:	f000 ffe4 	bl	8001e1a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200002e0 	.word	0x200002e0

08000e5c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8000e60:	4802      	ldr	r0, [pc, #8]	; (8000e6c <LTDC_IRQHandler+0x10>)
 8000e62:	f000 ff18 	bl	8001c96 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000844 	.word	0x20000844

08000e70 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8000e74:	4802      	ldr	r0, [pc, #8]	; (8000e80 <DMA2D_IRQHandler+0x10>)
 8000e76:	f000 fb39 	bl	80014ec <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000c34 	.word	0x20000c34

08000e84 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 8000e88:	4802      	ldr	r0, [pc, #8]	; (8000e94 <CEC_IRQHandler+0x10>)
 8000e8a:	f000 f923 	bl	80010d4 <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200007c0 	.word	0x200007c0

08000e98 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8000e9c:	4802      	ldr	r0, [pc, #8]	; (8000ea8 <DSI_IRQHandler+0x10>)
 8000e9e:	f000 fc35 	bl	800170c <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200007a4 	.word	0x200007a4

08000eac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <SystemInit+0x28>)
 8000eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb6:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <SystemInit+0x28>)
 8000eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <SystemInit+0x28>)
 8000ec2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ec6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <UartInit>:
volatile uint8_t uart_buf[100];
volatile uint8_t uart_buff_cnt;
volatile bool recv_command;


void UartInit(void){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &recv_data, 1);
 8000edc:	2201      	movs	r2, #1
 8000ede:	4903      	ldr	r1, [pc, #12]	; (8000eec <UartInit+0x14>)
 8000ee0:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <UartInit+0x18>)
 8000ee2:	f003 fb0f 	bl	8004504 <HAL_UART_Receive_IT>
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000e68 	.word	0x20000e68
 8000ef0:	20000a80 	.word	0x20000a80

08000ef4 <UartWriteCommand>:

void UartWriteCommand(uint8_t *data,uint8_t size){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	70fb      	strb	r3, [r7, #3]
	 HAL_UART_Transmit(&huart1, data, size, 100);
 8000f00:	78fb      	ldrb	r3, [r7, #3]
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	2364      	movs	r3, #100	; 0x64
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	4803      	ldr	r0, [pc, #12]	; (8000f18 <UartWriteCommand+0x24>)
 8000f0a:	f003 fa0d 	bl	8004328 <HAL_UART_Transmit>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000a80 	.word	0x20000a80

08000f1c <UartReadCommand>:

bool UartReadCommand(uint8_t *data){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	if(data){
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d01a      	beq.n	8000f60 <UartReadCommand+0x44>
		if(!recv_command){
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <UartReadCommand+0x50>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	f083 0301 	eor.w	r3, r3, #1
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <UartReadCommand+0x22>
			return false;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e011      	b.n	8000f62 <UartReadCommand+0x46>
		}
		strcpy(data, uart_buf);
 8000f3e:	490c      	ldr	r1, [pc, #48]	; (8000f70 <UartReadCommand+0x54>)
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f004 ff0f 	bl	8005d64 <strcpy>
		recv_command = false;
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <UartReadCommand+0x50>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
		uart_buff_cnt = 0;
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <UartReadCommand+0x58>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
		memset(uart_buf, 0x00, 100);
 8000f52:	2264      	movs	r2, #100	; 0x64
 8000f54:	2100      	movs	r1, #0
 8000f56:	4806      	ldr	r0, [pc, #24]	; (8000f70 <UartReadCommand+0x54>)
 8000f58:	f004 fefc 	bl	8005d54 <memset>
		return true;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e000      	b.n	8000f62 <UartReadCommand+0x46>
	}
	return false;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000ed0 	.word	0x20000ed0
 8000f70:	20000e6c 	.word	0x20000e6c
 8000f74:	20000ed1 	.word	0x20000ed1

08000f78 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	//ascii 0x0D - line feed
	if(recv_data == 0x0D){
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <HAL_UART_RxCpltCallback+0x58>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b0d      	cmp	r3, #13
 8000f88:	d103      	bne.n	8000f92 <HAL_UART_RxCpltCallback+0x1a>
		recv_command = true;
 8000f8a:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_UART_RxCpltCallback+0x5c>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
 8000f90:	e00f      	b.n	8000fb2 <HAL_UART_RxCpltCallback+0x3a>
	}else{
		uart_buf[uart_buff_cnt] = recv_data;
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HAL_UART_RxCpltCallback+0x60>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <HAL_UART_RxCpltCallback+0x58>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	b2d9      	uxtb	r1, r3
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HAL_UART_RxCpltCallback+0x64>)
 8000fa2:	5499      	strb	r1, [r3, r2]
		++uart_buff_cnt;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <HAL_UART_RxCpltCallback+0x60>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	3301      	adds	r3, #1
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_UART_RxCpltCallback+0x60>)
 8000fb0:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Transmit_IT(&huart1, &recv_data, 1);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	4906      	ldr	r1, [pc, #24]	; (8000fd0 <HAL_UART_RxCpltCallback+0x58>)
 8000fb6:	480a      	ldr	r0, [pc, #40]	; (8000fe0 <HAL_UART_RxCpltCallback+0x68>)
 8000fb8:	f003 fa48 	bl	800444c <HAL_UART_Transmit_IT>

	HAL_UART_Receive_IT(&huart1, &recv_data, 1);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4904      	ldr	r1, [pc, #16]	; (8000fd0 <HAL_UART_RxCpltCallback+0x58>)
 8000fc0:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <HAL_UART_RxCpltCallback+0x68>)
 8000fc2:	f003 fa9f 	bl	8004504 <HAL_UART_Receive_IT>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000e68 	.word	0x20000e68
 8000fd4:	20000ed0 	.word	0x20000ed0
 8000fd8:	20000ed1 	.word	0x20000ed1
 8000fdc:	20000e6c 	.word	0x20000e6c
 8000fe0:	20000a80 	.word	0x20000a80

08000fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800101c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fe8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fea:	e003      	b.n	8000ff4 <LoopCopyDataInit>

08000fec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ff0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ff2:	3104      	adds	r1, #4

08000ff4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ff4:	480b      	ldr	r0, [pc, #44]	; (8001024 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ff8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ffa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ffc:	d3f6      	bcc.n	8000fec <CopyDataInit>
  ldr  r2, =_sbss
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	; (800102c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001000:	e002      	b.n	8001008 <LoopFillZerobss>

08001002 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001002:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001004:	f842 3b04 	str.w	r3, [r2], #4

08001008 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800100a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800100c:	d3f9      	bcc.n	8001002 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800100e:	f7ff ff4d 	bl	8000eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001012:	f004 fe7b 	bl	8005d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001016:	f7ff faa7 	bl	8000568 <main>
  bx  lr    
 800101a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800101c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001020:	08005db8 	.word	0x08005db8
  ldr  r0, =_sdata
 8001024:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001028:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800102c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001030:	20000ed8 	.word	0x20000ed8

08001034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC_IRQHandler>

08001036 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103a:	2003      	movs	r0, #3
 800103c:	f000 f9ff 	bl	800143e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001040:	2000      	movs	r0, #0
 8001042:	f7ff fe7f 	bl	8000d44 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001046:	f7ff fd2f 	bl	8000aa8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_IncTick+0x20>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x24>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4413      	add	r3, r2
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <HAL_IncTick+0x24>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000008 	.word	0x20000008
 8001074:	20000ed4 	.word	0x20000ed4

08001078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return uwTick;
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <HAL_GetTick+0x14>)
 800107e:	681b      	ldr	r3, [r3, #0]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000ed4 	.word	0x20000ed4

08001090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001098:	f7ff ffee 	bl	8001078 <HAL_GetTick>
 800109c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a8:	d005      	beq.n	80010b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <HAL_Delay+0x40>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010b6:	bf00      	nop
 80010b8:	f7ff ffde 	bl	8001078 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d8f7      	bhi.n	80010b8 <HAL_Delay+0x28>
  {
  }
}
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000008 	.word	0x20000008

080010d4 <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t reg;
  reg = hcec->Instance->ISR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if ((reg & CEC_FLAG_ARBLST) != 0U)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d00a      	beq.n	8001104 <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2280      	movs	r2, #128	; 0x80
 80010f2:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	691a      	ldr	r2, [r3, #16]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001102:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if ((reg & CEC_FLAG_RXBR) != 0U)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b00      	cmp	r3, #0
 800110c:	d01c      	beq.n	8001148 <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2222      	movs	r2, #34	; 0x22
 8001112:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->RxXferSize++;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001118:	3301      	adds	r3, #1
 800111a:	b29a      	uxth	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	865a      	strh	r2, [r3, #50]	; 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	691a      	ldr	r2, [r3, #16]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f042 0201 	orr.w	r2, r2, #1
 8001146:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if ((reg & CEC_FLAG_RXEND) != 0U)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d01e      	beq.n	8001190 <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	691a      	ldr	r2, [r3, #16]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f042 0202 	orr.w	r2, r2, #2
 8001160:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2220      	movs	r2, #32
 8001166:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	641a      	str	r2, [r3, #64]	; 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001176:	425b      	negs	r3, r3
 8001178:	441a      	add	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001182:	4619      	mov	r1, r3
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f897 	bl	80012b8 <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if ((reg & CEC_FLAG_TXBR) != 0U)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001196:	2b00      	cmp	r3, #0
 8001198:	d030      	beq.n	80011fc <HAL_CEC_IRQHandler+0x128>
  {
    if (hcec->TxXferCount == 0U)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d113      	bne.n	80011ca <HAL_CEC_IRQHandler+0xf6>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f042 0204 	orr.w	r2, r2, #4
 80011b0:	601a      	str	r2, [r3, #0]
      hcec->Instance->TXDR = *hcec->pTxBuffPtr;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b6:	781a      	ldrb	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	609a      	str	r2, [r3, #8]
      hcec->pTxBuffPtr++;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80011c8:	e010      	b.n	80011ec <HAL_CEC_IRQHandler+0x118>
    }
    else
    {
      hcec->Instance->TXDR = *hcec->pTxBuffPtr;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ce:	781a      	ldrb	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	609a      	str	r2, [r3, #8]
      hcec->pTxBuffPtr++;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011da:	1c5a      	adds	r2, r3, #1
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	62da      	str	r2, [r3, #44]	; 0x2c
      hcec->TxXferCount--;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80011e4:	3b01      	subs	r3, #1
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	861a      	strh	r2, [r3, #48]	; 0x30
    }
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	691a      	ldr	r2, [r3, #16]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011fa:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if ((reg & CEC_FLAG_TXEND) != 0U)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001202:	2b00      	cmp	r3, #0
 8001204:	d014      	beq.n	8001230 <HAL_CEC_IRQHandler+0x15c>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	691a      	ldr	r2, [r3, #16]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001214:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2220      	movs	r2, #32
 800121a:	639a      	str	r2, [r3, #56]	; 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 f83a 	bl	80012a4 <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((reg & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR | CEC_ISR_TXERR |
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	f641 437c 	movw	r3, #7292	; 0x1c7c
 8001236:	4013      	ands	r3, r2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d02f      	beq.n	800129c <HAL_CEC_IRQHandler+0x1c8>
              CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = reg;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6919      	ldr	r1, [r3, #16]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	f641 437c 	movw	r3, #7292	; 0x1c7c
 8001250:	430b      	orrs	r3, r1
 8001252:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((reg & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00e      	beq.n	800127c <HAL_CEC_IRQHandler+0x1a8>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001266:	425b      	negs	r3, r3
 8001268:	441a      	add	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	629a      	str	r2, [r3, #40]	; 0x28
      hcec->RxXferSize = 0U;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	865a      	strh	r2, [r3, #50]	; 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2220      	movs	r2, #32
 8001278:	63da      	str	r2, [r3, #60]	; 0x3c
 800127a:	e00c      	b.n	8001296 <HAL_CEC_IRQHandler+0x1c2>
    }
    else if (((reg & CEC_ISR_ARBLST) == 0U) && ((reg & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001282:	2b00      	cmp	r3, #0
 8001284:	d107      	bne.n	8001296 <HAL_CEC_IRQHandler+0x1c2>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800128c:	2b00      	cmp	r3, #0
 800128e:	d002      	beq.n	8001296 <HAL_CEC_IRQHandler+0x1c2>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2220      	movs	r2, #32
 8001294:	639a      	str	r2, [r3, #56]	; 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f000 f819 	bl	80012ce <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 800129c:	bf00      	nop
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <__NVIC_SetPriorityGrouping+0x40>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001300:	4013      	ands	r3, r2
 8001302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <__NVIC_SetPriorityGrouping+0x44>)
 800130e:	4313      	orrs	r3, r2
 8001310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001312:	4a04      	ldr	r2, [pc, #16]	; (8001324 <__NVIC_SetPriorityGrouping+0x40>)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	60d3      	str	r3, [r2, #12]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00
 8001328:	05fa0000 	.word	0x05fa0000

0800132c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <__NVIC_GetPriorityGrouping+0x18>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	0a1b      	lsrs	r3, r3, #8
 8001336:	f003 0307 	and.w	r3, r3, #7
}
 800133a:	4618      	mov	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	2b00      	cmp	r3, #0
 8001358:	db0b      	blt.n	8001372 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	f003 021f 	and.w	r2, r3, #31
 8001360:	4907      	ldr	r1, [pc, #28]	; (8001380 <__NVIC_EnableIRQ+0x38>)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	095b      	lsrs	r3, r3, #5
 8001368:	2001      	movs	r0, #1
 800136a:	fa00 f202 	lsl.w	r2, r0, r2
 800136e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000e100 	.word	0xe000e100

08001384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	db0a      	blt.n	80013ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	490c      	ldr	r1, [pc, #48]	; (80013d0 <__NVIC_SetPriority+0x4c>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	0112      	lsls	r2, r2, #4
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	440b      	add	r3, r1
 80013a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ac:	e00a      	b.n	80013c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4908      	ldr	r1, [pc, #32]	; (80013d4 <__NVIC_SetPriority+0x50>)
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	3b04      	subs	r3, #4
 80013bc:	0112      	lsls	r2, r2, #4
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	440b      	add	r3, r1
 80013c2:	761a      	strb	r2, [r3, #24]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000e100 	.word	0xe000e100
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b089      	sub	sp, #36	; 0x24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f1c3 0307 	rsb	r3, r3, #7
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	bf28      	it	cs
 80013f6:	2304      	movcs	r3, #4
 80013f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3304      	adds	r3, #4
 80013fe:	2b06      	cmp	r3, #6
 8001400:	d902      	bls.n	8001408 <NVIC_EncodePriority+0x30>
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3b03      	subs	r3, #3
 8001406:	e000      	b.n	800140a <NVIC_EncodePriority+0x32>
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	f04f 32ff 	mov.w	r2, #4294967295
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43da      	mvns	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	401a      	ands	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001420:	f04f 31ff 	mov.w	r1, #4294967295
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	43d9      	mvns	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	4313      	orrs	r3, r2
         );
}
 8001432:	4618      	mov	r0, r3
 8001434:	3724      	adds	r7, #36	; 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ff4c 	bl	80012e4 <__NVIC_SetPriorityGrouping>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
 8001460:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001466:	f7ff ff61 	bl	800132c <__NVIC_GetPriorityGrouping>
 800146a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	68b9      	ldr	r1, [r7, #8]
 8001470:	6978      	ldr	r0, [r7, #20]
 8001472:	f7ff ffb1 	bl	80013d8 <NVIC_EncodePriority>
 8001476:	4602      	mov	r2, r0
 8001478:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ff80 	bl	8001384 <__NVIC_SetPriority>
}
 8001484:	bf00      	nop
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ff54 	bl	8001348 <__NVIC_EnableIRQ>
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d004      	beq.n	80014c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2280      	movs	r2, #128	; 0x80
 80014c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e00c      	b.n	80014e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2205      	movs	r2, #5
 80014ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 0201 	bic.w	r2, r2, #1
 80014dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d026      	beq.n	800155c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001514:	2b00      	cmp	r3, #0
 8001516:	d021      	beq.n	800155c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001526:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152c:	f043 0201 	orr.w	r2, r3, #1
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2201      	movs	r2, #1
 800153a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2204      	movs	r2, #4
 8001540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if(hdma2d->XferErrorCallback != NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0320 	and.w	r3, r3, #32
 8001562:	2b00      	cmp	r3, #0
 8001564:	d026      	beq.n	80015b4 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d021      	beq.n	80015b4 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800157e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2220      	movs	r2, #32
 8001586:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158c:	f043 0202 	orr.w	r2, r3, #2
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2204      	movs	r2, #4
 8001598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if(hdma2d->XferErrorCallback != NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d026      	beq.n	800160c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d021      	beq.n	800160c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015d6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2208      	movs	r2, #8
 80015de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e4:	f043 0204 	orr.w	r2, r3, #4
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2204      	movs	r2, #4
 80015f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if(hdma2d->XferErrorCallback != NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	2b00      	cmp	r3, #0
 8001614:	d013      	beq.n	800163e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00e      	beq.n	800163e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800162e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2204      	movs	r2, #4
 8001636:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 f853 	bl	80016e4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d024      	beq.n	8001692 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800164e:	2b00      	cmp	r3, #0
 8001650:	d01f      	beq.n	8001692 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001660:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2202      	movs	r2, #2
 8001668:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if(hdma2d->XferCpltCallback != NULL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	2b00      	cmp	r3, #0
 800169a:	d01f      	beq.n	80016dc <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d01a      	beq.n	80016dc <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80016b4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2210      	movs	r2, #16
 80016bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f80e 	bl	80016f8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00f      	beq.n	8001744 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	2b00      	cmp	r3, #0
 8001732:	d007      	beq.n	8001744 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2201      	movs	r2, #1
 800173a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f8ad 	bl	800189e <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00f      	beq.n	8001774 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d007      	beq.n	8001774 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2202      	movs	r2, #2
 800176a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 f89f 	bl	80018b2 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 808c 	beq.w	8001896 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001786:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	4013      	ands	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800179e:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80017a8:	68ba      	ldr	r2, [r7, #8]
 80017aa:	4013      	ands	r3, r2
 80017ac:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d005      	beq.n	80017c2 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	f043 0201 	orr.w	r2, r3, #1
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	f043 0202 	orr.w	r2, r3, #2
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d005      	beq.n	80017ee <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f043 0204 	orr.w	r2, r3, #4
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	f043 0208 	orr.w	r2, r3, #8
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b00      	cmp	r3, #0
 800180c:	d005      	beq.n	800181a <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	f043 0210 	orr.w	r2, r3, #16
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	f003 0310 	and.w	r3, r3, #16
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	f043 0220 	orr.w	r2, r3, #32
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f003 0320 	and.w	r3, r3, #32
 8001836:	2b00      	cmp	r3, #0
 8001838:	d005      	beq.n	8001846 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001862:	2b00      	cmp	r3, #0
 8001864:	d005      	beq.n	8001872 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d002      	beq.n	8001896 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 f818 	bl	80018c6 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	; 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
 80018fa:	e175      	b.n	8001be8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80018fc:	2201      	movs	r2, #1
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	429a      	cmp	r2, r3
 8001916:	f040 8164 	bne.w	8001be2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d00b      	beq.n	800193a <HAL_GPIO_Init+0x5e>
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d007      	beq.n	800193a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800192e:	2b11      	cmp	r3, #17
 8001930:	d003      	beq.n	800193a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b12      	cmp	r3, #18
 8001938:	d130      	bne.n	800199c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	2203      	movs	r2, #3
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001970:	2201      	movs	r2, #1
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	f003 0201 	and.w	r2, r3, #1
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	2203      	movs	r2, #3
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_Init+0x100>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b12      	cmp	r3, #18
 80019da:	d123      	bne.n	8001a24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	08da      	lsrs	r2, r3, #3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3208      	adds	r2, #8
 80019e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	220f      	movs	r2, #15
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	691a      	ldr	r2, [r3, #16]
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	08da      	lsrs	r2, r3, #3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3208      	adds	r2, #8
 8001a1e:	69b9      	ldr	r1, [r7, #24]
 8001a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	2203      	movs	r2, #3
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0203 	and.w	r2, r3, #3
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 80be 	beq.w	8001be2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a66:	4b65      	ldr	r3, [pc, #404]	; (8001bfc <HAL_GPIO_Init+0x320>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	4a64      	ldr	r2, [pc, #400]	; (8001bfc <HAL_GPIO_Init+0x320>)
 8001a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a70:	6453      	str	r3, [r2, #68]	; 0x44
 8001a72:	4b62      	ldr	r3, [pc, #392]	; (8001bfc <HAL_GPIO_Init+0x320>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a7e:	4a60      	ldr	r2, [pc, #384]	; (8001c00 <HAL_GPIO_Init+0x324>)
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	3302      	adds	r3, #2
 8001a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	220f      	movs	r2, #15
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a57      	ldr	r2, [pc, #348]	; (8001c04 <HAL_GPIO_Init+0x328>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d037      	beq.n	8001b1a <HAL_GPIO_Init+0x23e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a56      	ldr	r2, [pc, #344]	; (8001c08 <HAL_GPIO_Init+0x32c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d031      	beq.n	8001b16 <HAL_GPIO_Init+0x23a>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a55      	ldr	r2, [pc, #340]	; (8001c0c <HAL_GPIO_Init+0x330>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d02b      	beq.n	8001b12 <HAL_GPIO_Init+0x236>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a54      	ldr	r2, [pc, #336]	; (8001c10 <HAL_GPIO_Init+0x334>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d025      	beq.n	8001b0e <HAL_GPIO_Init+0x232>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a53      	ldr	r2, [pc, #332]	; (8001c14 <HAL_GPIO_Init+0x338>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d01f      	beq.n	8001b0a <HAL_GPIO_Init+0x22e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a52      	ldr	r2, [pc, #328]	; (8001c18 <HAL_GPIO_Init+0x33c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d019      	beq.n	8001b06 <HAL_GPIO_Init+0x22a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a51      	ldr	r2, [pc, #324]	; (8001c1c <HAL_GPIO_Init+0x340>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <HAL_GPIO_Init+0x226>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a50      	ldr	r2, [pc, #320]	; (8001c20 <HAL_GPIO_Init+0x344>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d00d      	beq.n	8001afe <HAL_GPIO_Init+0x222>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a4f      	ldr	r2, [pc, #316]	; (8001c24 <HAL_GPIO_Init+0x348>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d007      	beq.n	8001afa <HAL_GPIO_Init+0x21e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a4e      	ldr	r2, [pc, #312]	; (8001c28 <HAL_GPIO_Init+0x34c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d101      	bne.n	8001af6 <HAL_GPIO_Init+0x21a>
 8001af2:	2309      	movs	r3, #9
 8001af4:	e012      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001af6:	230a      	movs	r3, #10
 8001af8:	e010      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001afa:	2308      	movs	r3, #8
 8001afc:	e00e      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001afe:	2307      	movs	r3, #7
 8001b00:	e00c      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001b02:	2306      	movs	r3, #6
 8001b04:	e00a      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001b06:	2305      	movs	r3, #5
 8001b08:	e008      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e004      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e002      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	69fa      	ldr	r2, [r7, #28]
 8001b1e:	f002 0203 	and.w	r2, r2, #3
 8001b22:	0092      	lsls	r2, r2, #2
 8001b24:	4093      	lsls	r3, r2
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b2c:	4934      	ldr	r1, [pc, #208]	; (8001c00 <HAL_GPIO_Init+0x324>)
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	089b      	lsrs	r3, r3, #2
 8001b32:	3302      	adds	r3, #2
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b3a:	4b3c      	ldr	r3, [pc, #240]	; (8001c2c <HAL_GPIO_Init+0x350>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b5e:	4a33      	ldr	r2, [pc, #204]	; (8001c2c <HAL_GPIO_Init+0x350>)
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b64:	4b31      	ldr	r3, [pc, #196]	; (8001c2c <HAL_GPIO_Init+0x350>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b88:	4a28      	ldr	r2, [pc, #160]	; (8001c2c <HAL_GPIO_Init+0x350>)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b8e:	4b27      	ldr	r3, [pc, #156]	; (8001c2c <HAL_GPIO_Init+0x350>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bb2:	4a1e      	ldr	r2, [pc, #120]	; (8001c2c <HAL_GPIO_Init+0x350>)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bb8:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <HAL_GPIO_Init+0x350>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bdc:	4a13      	ldr	r2, [pc, #76]	; (8001c2c <HAL_GPIO_Init+0x350>)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3301      	adds	r3, #1
 8001be6:	61fb      	str	r3, [r7, #28]
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	2b0f      	cmp	r3, #15
 8001bec:	f67f ae86 	bls.w	80018fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	3724      	adds	r7, #36	; 0x24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40013800 	.word	0x40013800
 8001c04:	40020000 	.word	0x40020000
 8001c08:	40020400 	.word	0x40020400
 8001c0c:	40020800 	.word	0x40020800
 8001c10:	40020c00 	.word	0x40020c00
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40021400 	.word	0x40021400
 8001c1c:	40021800 	.word	0x40021800
 8001c20:	40021c00 	.word	0x40021c00
 8001c24:	40022000 	.word	0x40022000
 8001c28:	40022400 	.word	0x40022400
 8001c2c:	40013c00 	.word	0x40013c00

08001c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	807b      	strh	r3, [r7, #2]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c40:	787b      	ldrb	r3, [r7, #1]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c46:	887a      	ldrh	r2, [r7, #2]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c4c:	e003      	b.n	8001c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c4e:	887b      	ldrh	r3, [r7, #2]
 8001c50:	041a      	lsls	r2, r3, #16
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	619a      	str	r2, [r3, #24]
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695a      	ldr	r2, [r3, #20]
 8001c72:	887b      	ldrh	r3, [r7, #2]
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d004      	beq.n	8001c84 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001c7a:	887b      	ldrh	r3, [r7, #2]
 8001c7c:	041a      	lsls	r2, r3, #16
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001c82:	e002      	b.n	8001c8a <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c84:	887a      	ldrh	r2, [r7, #2]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	619a      	str	r2, [r3, #24]
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b084      	sub	sp, #16
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca4:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cac:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d023      	beq.n	8001d00 <HAL_LTDC_IRQHandler+0x6a>
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d01e      	beq.n	8001d00 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0204 	bic.w	r2, r2, #4
 8001cd0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001ce0:	f043 0201 	orr.w	r2, r3, #1
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2204      	movs	r2, #4
 8001cee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f86f 	bl	8001dde <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d023      	beq.n	8001d52 <HAL_LTDC_IRQHandler+0xbc>
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d01e      	beq.n	8001d52 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0202 	bic.w	r2, r2, #2
 8001d22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2202      	movs	r2, #2
 8001d2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d32:	f043 0202 	orr.w	r2, r3, #2
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2204      	movs	r2, #4
 8001d40:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f846 	bl	8001dde <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d01b      	beq.n	8001d94 <HAL_LTDC_IRQHandler+0xfe>
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d016      	beq.n	8001d94 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0201 	bic.w	r2, r2, #1
 8001d74:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f82f 	bl	8001df2 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d01b      	beq.n	8001dd6 <HAL_LTDC_IRQHandler+0x140>
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d016      	beq.n	8001dd6 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0208 	bic.w	r2, r2, #8
 8001db6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2208      	movs	r2, #8
 8001dbe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f818 	bl	8001e06 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e1a:	b590      	push	{r4, r7, lr}
 8001e1c:	b08d      	sub	sp, #52	; 0x34
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e28:	6a3b      	ldr	r3, [r7, #32]
 8001e2a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f003 fcc3 	bl	80057bc <USB_GetMode>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f040 83ca 	bne.w	80025d2 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f003 fc27 	bl	8005696 <USB_ReadInterrupts>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 83c0 	beq.w	80025d0 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f003 fc1e 	bl	8005696 <USB_ReadInterrupts>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d107      	bne.n	8001e74 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	695a      	ldr	r2, [r3, #20]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f002 0202 	and.w	r2, r2, #2
 8001e72:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f003 fc0c 	bl	8005696 <USB_ReadInterrupts>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	2b10      	cmp	r3, #16
 8001e86:	d161      	bne.n	8001f4c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699a      	ldr	r2, [r3, #24]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0210 	bic.w	r2, r2, #16
 8001e96:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	f003 020f 	and.w	r2, r3, #15
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	1a9b      	subs	r3, r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	0c5b      	lsrs	r3, r3, #17
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d124      	bne.n	8001f0e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d035      	beq.n	8001f3c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	091b      	lsrs	r3, r3, #4
 8001ed8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001eda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	6a38      	ldr	r0, [r7, #32]
 8001ee4:	f003 fbae 	bl	8005644 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	091b      	lsrs	r3, r3, #4
 8001ef0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ef4:	441a      	add	r2, r3
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	699a      	ldr	r2, [r3, #24]
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f06:	441a      	add	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	619a      	str	r2, [r3, #24]
 8001f0c:	e016      	b.n	8001f3c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	0c5b      	lsrs	r3, r3, #17
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	2b06      	cmp	r3, #6
 8001f18:	d110      	bne.n	8001f3c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f20:	2208      	movs	r2, #8
 8001f22:	4619      	mov	r1, r3
 8001f24:	6a38      	ldr	r0, [r7, #32]
 8001f26:	f003 fb8d 	bl	8005644 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	699a      	ldr	r2, [r3, #24]
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	091b      	lsrs	r3, r3, #4
 8001f32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f36:	441a      	add	r2, r3
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699a      	ldr	r2, [r3, #24]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0210 	orr.w	r2, r2, #16
 8001f4a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f003 fba0 	bl	8005696 <USB_ReadInterrupts>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f5c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f60:	d16e      	bne.n	8002040 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f003 fba6 	bl	80056bc <USB_ReadDevAllOutEpInterrupt>
 8001f70:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001f72:	e062      	b.n	800203a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d057      	beq.n	800202e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f003 fbcb 	bl	8005724 <USB_ReadDevOutEPInterrupt>
 8001f8e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00c      	beq.n	8001fb4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	2301      	movs	r3, #1
 8001faa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001fac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 fc16 	bl	80027e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00c      	beq.n	8001fd8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	015a      	lsls	r2, r3, #5
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fca:	461a      	mov	r2, r3
 8001fcc:	2308      	movs	r3, #8
 8001fce:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001fd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 fd10 	bl	80029f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d008      	beq.n	8001ff4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	015a      	lsls	r2, r3, #5
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fee:	461a      	mov	r2, r3
 8001ff0:	2310      	movs	r3, #16
 8001ff2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	f003 0320 	and.w	r3, r3, #32
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d008      	beq.n	8002010 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	015a      	lsls	r2, r3, #5
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	4413      	add	r3, r2
 8002006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800200a:	461a      	mov	r2, r3
 800200c:	2320      	movs	r3, #32
 800200e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d009      	beq.n	800202e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	015a      	lsls	r2, r3, #5
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	4413      	add	r3, r2
 8002022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002026:	461a      	mov	r2, r3
 8002028:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800202c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	3301      	adds	r3, #1
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002036:	085b      	lsrs	r3, r3, #1
 8002038:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800203a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203c:	2b00      	cmp	r3, #0
 800203e:	d199      	bne.n	8001f74 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f003 fb26 	bl	8005696 <USB_ReadInterrupts>
 800204a:	4603      	mov	r3, r0
 800204c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002050:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002054:	f040 80c0 	bne.w	80021d8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f003 fb47 	bl	80056f0 <USB_ReadDevAllInEpInterrupt>
 8002062:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002068:	e0b2      	b.n	80021d0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800206a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80a7 	beq.w	80021c4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f003 fb6d 	bl	8005760 <USB_ReadDevInEPInterrupt>
 8002086:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d057      	beq.n	8002142 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	2201      	movs	r2, #1
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69f9      	ldr	r1, [r7, #28]
 80020ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020b2:	4013      	ands	r3, r2
 80020b4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	015a      	lsls	r2, r3, #5
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	4413      	add	r3, r2
 80020be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020c2:	461a      	mov	r2, r3
 80020c4:	2301      	movs	r3, #1
 80020c6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d132      	bne.n	8002136 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	1a9b      	subs	r3, r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	3348      	adds	r3, #72	; 0x48
 80020e0:	6819      	ldr	r1, [r3, #0]
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4403      	add	r3, r0
 80020f0:	3344      	adds	r3, #68	; 0x44
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4419      	add	r1, r3
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020fa:	4613      	mov	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	1a9b      	subs	r3, r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4403      	add	r3, r0
 8002104:	3348      	adds	r3, #72	; 0x48
 8002106:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	2b00      	cmp	r3, #0
 800210c:	d113      	bne.n	8002136 <HAL_PCD_IRQHandler+0x31c>
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	3350      	adds	r3, #80	; 0x50
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d108      	bne.n	8002136 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800212e:	461a      	mov	r2, r3
 8002130:	2101      	movs	r1, #1
 8002132:	f003 fb75 	bl	8005820 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	b2db      	uxtb	r3, r3
 800213a:	4619      	mov	r1, r3
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 fa57 	bl	80025f0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	2b00      	cmp	r3, #0
 800214a:	d008      	beq.n	800215e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	015a      	lsls	r2, r3, #5
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	4413      	add	r3, r2
 8002154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002158:	461a      	mov	r2, r3
 800215a:	2308      	movs	r3, #8
 800215c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	015a      	lsls	r2, r3, #5
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	4413      	add	r3, r2
 8002170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002174:	461a      	mov	r2, r3
 8002176:	2310      	movs	r3, #16
 8002178:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	015a      	lsls	r2, r3, #5
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	4413      	add	r3, r2
 800218c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002190:	461a      	mov	r2, r3
 8002192:	2340      	movs	r3, #64	; 0x40
 8002194:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	015a      	lsls	r2, r3, #5
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	4413      	add	r3, r2
 80021a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021ac:	461a      	mov	r2, r3
 80021ae:	2302      	movs	r3, #2
 80021b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80021bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 fa80 	bl	80026c4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	3301      	adds	r3, #1
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021cc:	085b      	lsrs	r3, r3, #1
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f47f af49 	bne.w	800206a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f003 fa5a 	bl	8005696 <USB_ReadInterrupts>
 80021e2:	4603      	mov	r3, r0
 80021e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021ec:	d122      	bne.n	8002234 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	69fa      	ldr	r2, [r7, #28]
 80021f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002208:	2b01      	cmp	r3, #1
 800220a:	d108      	bne.n	800221e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002214:	2100      	movs	r1, #0
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 fc34 	bl	8002a84 <HAL_PCDEx_LPM_Callback>
 800221c:	e002      	b.n	8002224 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 fa1a 	bl	8002658 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695a      	ldr	r2, [r3, #20]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002232:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f003 fa2c 	bl	8005696 <USB_ReadInterrupts>
 800223e:	4603      	mov	r3, r0
 8002240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002244:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002248:	d112      	bne.n	8002270 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b01      	cmp	r3, #1
 8002258:	d102      	bne.n	8002260 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f9f2 	bl	8002644 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695a      	ldr	r2, [r3, #20]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800226e:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f003 fa0e 	bl	8005696 <USB_ReadInterrupts>
 800227a:	4603      	mov	r3, r0
 800227c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002280:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002284:	d121      	bne.n	80022ca <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	695a      	ldr	r2, [r3, #20]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002294:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800229c:	2b00      	cmp	r3, #0
 800229e:	d111      	bne.n	80022c4 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ae:	089b      	lsrs	r3, r3, #2
 80022b0:	f003 020f 	and.w	r2, r3, #15
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80022ba:	2101      	movs	r1, #1
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 fbe1 	bl	8002a84 <HAL_PCDEx_LPM_Callback>
 80022c2:	e002      	b.n	80022ca <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f9bd 	bl	8002644 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f003 f9e1 	bl	8005696 <USB_ReadInterrupts>
 80022d4:	4603      	mov	r3, r0
 80022d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022de:	f040 80c7 	bne.w	8002470 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	69fa      	ldr	r2, [r7, #28]
 80022ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2110      	movs	r1, #16
 80022fc:	4618      	mov	r0, r3
 80022fe:	f003 f921 	bl	8005544 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002302:	2300      	movs	r3, #0
 8002304:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002306:	e056      	b.n	80023b6 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230a:	015a      	lsls	r2, r3, #5
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	4413      	add	r3, r2
 8002310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002314:	461a      	mov	r2, r3
 8002316:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800231a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800231c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	4413      	add	r3, r2
 8002324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800232c:	0151      	lsls	r1, r2, #5
 800232e:	69fa      	ldr	r2, [r7, #28]
 8002330:	440a      	add	r2, r1
 8002332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002336:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800233a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800233c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	4413      	add	r3, r2
 8002344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800234c:	0151      	lsls	r1, r2, #5
 800234e:	69fa      	ldr	r2, [r7, #28]
 8002350:	440a      	add	r2, r1
 8002352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002356:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800235a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800235c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235e:	015a      	lsls	r2, r3, #5
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	4413      	add	r3, r2
 8002364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002368:	461a      	mov	r2, r3
 800236a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800236e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002372:	015a      	lsls	r2, r3, #5
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	4413      	add	r3, r2
 8002378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002380:	0151      	lsls	r1, r2, #5
 8002382:	69fa      	ldr	r2, [r7, #28]
 8002384:	440a      	add	r2, r1
 8002386:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800238a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800238e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002392:	015a      	lsls	r2, r3, #5
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	4413      	add	r3, r2
 8002398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023a0:	0151      	lsls	r1, r2, #5
 80023a2:	69fa      	ldr	r2, [r7, #28]
 80023a4:	440a      	add	r2, r1
 80023a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80023aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023ae:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b2:	3301      	adds	r3, #1
 80023b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023bc:	429a      	cmp	r2, r3
 80023be:	d3a3      	bcc.n	8002308 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	69fa      	ldr	r2, [r7, #28]
 80023ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023ce:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80023d2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d016      	beq.n	800240a <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023e6:	69fa      	ldr	r2, [r7, #28]
 80023e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023ec:	f043 030b 	orr.w	r3, r3, #11
 80023f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fc:	69fa      	ldr	r2, [r7, #28]
 80023fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002402:	f043 030b 	orr.w	r3, r3, #11
 8002406:	6453      	str	r3, [r2, #68]	; 0x44
 8002408:	e015      	b.n	8002436 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002418:	4619      	mov	r1, r3
 800241a:	f242 032b 	movw	r3, #8235	; 0x202b
 800241e:	4313      	orrs	r3, r2
 8002420:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002430:	f043 030b 	orr.w	r3, r3, #11
 8002434:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	69fa      	ldr	r2, [r7, #28]
 8002440:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002444:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002448:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800245a:	461a      	mov	r2, r3
 800245c:	f003 f9e0 	bl	8005820 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695a      	ldr	r2, [r3, #20]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800246e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f003 f90e 	bl	8005696 <USB_ReadInterrupts>
 800247a:	4603      	mov	r3, r0
 800247c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002484:	d124      	bne.n	80024d0 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f003 f9a4 	bl	80057d8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f003 f87b 	bl	8005590 <USB_GetDevSpeed>
 800249a:	4603      	mov	r3, r0
 800249c:	461a      	mov	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681c      	ldr	r4, [r3, #0]
 80024a6:	f001 f809 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 80024aa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	461a      	mov	r2, r3
 80024b4:	4620      	mov	r0, r4
 80024b6:	f002 ffa3 	bl	8005400 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f8b8 	bl	8002630 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80024ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f003 f8de 	bl	8005696 <USB_ReadInterrupts>
 80024da:	4603      	mov	r3, r0
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d10a      	bne.n	80024fa <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f899 	bl	800261c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	695a      	ldr	r2, [r3, #20]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f002 0208 	and.w	r2, r2, #8
 80024f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f003 f8c9 	bl	8005696 <USB_ReadInterrupts>
 8002504:	4603      	mov	r3, r0
 8002506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800250a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800250e:	d10f      	bne.n	8002530 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	b2db      	uxtb	r3, r3
 8002518:	4619      	mov	r1, r3
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f8b2 	bl	8002684 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695a      	ldr	r2, [r3, #20]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800252e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f003 f8ae 	bl	8005696 <USB_ReadInterrupts>
 800253a:	4603      	mov	r3, r0
 800253c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002540:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002544:	d10f      	bne.n	8002566 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	b2db      	uxtb	r3, r3
 800254e:	4619      	mov	r1, r3
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f88b 	bl	800266c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695a      	ldr	r2, [r3, #20]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002564:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f003 f893 	bl	8005696 <USB_ReadInterrupts>
 8002570:	4603      	mov	r3, r0
 8002572:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800257a:	d10a      	bne.n	8002592 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f88d 	bl	800269c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	695a      	ldr	r2, [r3, #20]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002590:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f003 f87d 	bl	8005696 <USB_ReadInterrupts>
 800259c:	4603      	mov	r3, r0
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d115      	bne.n	80025d2 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f879 	bl	80026b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6859      	ldr	r1, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	e000      	b.n	80025d2 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80025d0:	bf00      	nop
    }
  }
}
 80025d2:	3734      	adds	r7, #52	; 0x34
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd90      	pop	{r4, r7, pc}

080025d8 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08a      	sub	sp, #40	; 0x28
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	3338      	adds	r3, #56	; 0x38
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	4413      	add	r3, r2
 80026e8:	3304      	adds	r3, #4
 80026ea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d901      	bls.n	80026fc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e06c      	b.n	80027d6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	695a      	ldr	r2, [r3, #20]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	69fa      	ldr	r2, [r7, #28]
 800270e:	429a      	cmp	r2, r3
 8002710:	d902      	bls.n	8002718 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	3303      	adds	r3, #3
 800271c:	089b      	lsrs	r3, r3, #2
 800271e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002720:	e02b      	b.n	800277a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	695a      	ldr	r2, [r3, #20]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	429a      	cmp	r2, r3
 8002736:	d902      	bls.n	800273e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	3303      	adds	r3, #3
 8002742:	089b      	lsrs	r3, r3, #2
 8002744:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	68d9      	ldr	r1, [r3, #12]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	b2da      	uxtb	r2, r3
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002756:	b2db      	uxtb	r3, r3
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	4603      	mov	r3, r0
 800275c:	6978      	ldr	r0, [r7, #20]
 800275e:	f002 ff3c 	bl	80055da <USB_WritePacket>

    ep->xfer_buff  += len;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	441a      	add	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	699a      	ldr	r2, [r3, #24]
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	441a      	add	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	015a      	lsls	r2, r3, #5
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4413      	add	r3, r2
 8002782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	b29b      	uxth	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	429a      	cmp	r2, r3
 800278e:	d809      	bhi.n	80027a4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	699a      	ldr	r2, [r3, #24]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002798:	429a      	cmp	r2, r3
 800279a:	d203      	bcs.n	80027a4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1be      	bne.n	8002722 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	695a      	ldr	r2, [r3, #20]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d811      	bhi.n	80027d4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	2201      	movs	r2, #1
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	6939      	ldr	r1, [r7, #16]
 80027cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027d0:	4013      	ands	r3, r2
 80027d2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3720      	adds	r7, #32
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	333c      	adds	r3, #60	; 0x3c
 80027f8:	3304      	adds	r3, #4
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4413      	add	r3, r2
 8002806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	2b01      	cmp	r3, #1
 8002814:	f040 80a0 	bne.w	8002958 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d015      	beq.n	800284e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4a72      	ldr	r2, [pc, #456]	; (80029f0 <PCD_EP_OutXfrComplete_int+0x210>)
 8002826:	4293      	cmp	r3, r2
 8002828:	f240 80dd 	bls.w	80029e6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 80d7 	beq.w	80029e6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	015a      	lsls	r2, r3, #5
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4413      	add	r3, r2
 8002840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002844:	461a      	mov	r2, r3
 8002846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800284a:	6093      	str	r3, [r2, #8]
 800284c:	e0cb      	b.n	80029e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	f003 0320 	and.w	r3, r3, #32
 8002854:	2b00      	cmp	r3, #0
 8002856:	d009      	beq.n	800286c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4413      	add	r3, r2
 8002860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002864:	461a      	mov	r2, r3
 8002866:	2320      	movs	r3, #32
 8002868:	6093      	str	r3, [r2, #8]
 800286a:	e0bc      	b.n	80029e6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002872:	2b00      	cmp	r3, #0
 8002874:	f040 80b7 	bne.w	80029e6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4a5d      	ldr	r2, [pc, #372]	; (80029f0 <PCD_EP_OutXfrComplete_int+0x210>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d90f      	bls.n	80028a0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00a      	beq.n	80028a0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4413      	add	r3, r2
 8002892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002896:	461a      	mov	r2, r3
 8002898:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800289c:	6093      	str	r3, [r2, #8]
 800289e:	e0a2      	b.n	80029e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	4613      	mov	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80028b2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	0159      	lsls	r1, r3, #5
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	440b      	add	r3, r1
 80028bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80028c6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	4613      	mov	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4403      	add	r3, r0
 80028d6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80028da:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	4613      	mov	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028ee:	6819      	ldr	r1, [r3, #0]
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	4613      	mov	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4403      	add	r3, r0
 80028fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4419      	add	r1, r3
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	4613      	mov	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	1a9b      	subs	r3, r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4403      	add	r3, r0
 8002914:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002918:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d114      	bne.n	800294a <PCD_EP_OutXfrComplete_int+0x16a>
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	4613      	mov	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	1a9b      	subs	r3, r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d108      	bne.n	800294a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002942:	461a      	mov	r2, r3
 8002944:	2101      	movs	r1, #1
 8002946:	f002 ff6b 	bl	8005820 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	b2db      	uxtb	r3, r3
 800294e:	4619      	mov	r1, r3
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff fe41 	bl	80025d8 <HAL_PCD_DataOutStageCallback>
 8002956:	e046      	b.n	80029e6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4a26      	ldr	r2, [pc, #152]	; (80029f4 <PCD_EP_OutXfrComplete_int+0x214>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d124      	bne.n	80029aa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00a      	beq.n	8002980 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4413      	add	r3, r2
 8002972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002976:	461a      	mov	r2, r3
 8002978:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800297c:	6093      	str	r3, [r2, #8]
 800297e:	e032      	b.n	80029e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f003 0320 	and.w	r3, r3, #32
 8002986:	2b00      	cmp	r3, #0
 8002988:	d008      	beq.n	800299c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	015a      	lsls	r2, r3, #5
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4413      	add	r3, r2
 8002992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002996:	461a      	mov	r2, r3
 8002998:	2320      	movs	r3, #32
 800299a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	4619      	mov	r1, r3
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff fe18 	bl	80025d8 <HAL_PCD_DataOutStageCallback>
 80029a8:	e01d      	b.n	80029e6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d114      	bne.n	80029da <PCD_EP_OutXfrComplete_int+0x1fa>
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	4613      	mov	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d108      	bne.n	80029da <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029d2:	461a      	mov	r2, r3
 80029d4:	2100      	movs	r1, #0
 80029d6:	f002 ff23 	bl	8005820 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	4619      	mov	r1, r3
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff fdf9 	bl	80025d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	4f54300a 	.word	0x4f54300a
 80029f4:	4f54310a 	.word	0x4f54310a

080029f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	333c      	adds	r3, #60	; 0x3c
 8002a10:	3304      	adds	r3, #4
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	015a      	lsls	r2, r3, #5
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4a15      	ldr	r2, [pc, #84]	; (8002a80 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d90e      	bls.n	8002a4c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d009      	beq.n	8002a4c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a44:	461a      	mov	r2, r3
 8002a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a4a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff fddb 	bl	8002608 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d90c      	bls.n	8002a74 <PCD_EP_OutSetupPacket_int+0x7c>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d108      	bne.n	8002a74 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	2101      	movs	r1, #1
 8002a70:	f002 fed6 	bl	8005820 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	4f54300a 	.word	0x4f54300a

08002a84 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aa0:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aaa:	6013      	str	r3, [r2, #0]
}
 8002aac:	bf00      	nop
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40007000 	.word	0x40007000

08002abc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ac6:	4b23      	ldr	r3, [pc, #140]	; (8002b54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	4a22      	ldr	r2, [pc, #136]	; (8002b54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ad2:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ada:	603b      	str	r3, [r7, #0]
 8002adc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002ade:	4b1e      	ldr	r3, [pc, #120]	; (8002b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a1d      	ldr	r2, [pc, #116]	; (8002b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002aea:	f7fe fac5 	bl	8001078 <HAL_GetTick>
 8002aee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002af0:	e009      	b.n	8002b06 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002af2:	f7fe fac1 	bl	8001078 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b00:	d901      	bls.n	8002b06 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e022      	b.n	8002b4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b06:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b12:	d1ee      	bne.n	8002af2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b14:	4b10      	ldr	r3, [pc, #64]	; (8002b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a0f      	ldr	r2, [pc, #60]	; (8002b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b1e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b20:	f7fe faaa 	bl	8001078 <HAL_GetTick>
 8002b24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b26:	e009      	b.n	8002b3c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b28:	f7fe faa6 	bl	8001078 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b36:	d901      	bls.n	8002b3c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e007      	b.n	8002b4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b48:	d1ee      	bne.n	8002b28 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40007000 	.word	0x40007000

08002b5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b64:	2300      	movs	r3, #0
 8002b66:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e29b      	b.n	80030aa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 8087 	beq.w	8002c8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b80:	4b96      	ldr	r3, [pc, #600]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 030c 	and.w	r3, r3, #12
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d00c      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b8c:	4b93      	ldr	r3, [pc, #588]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 030c 	and.w	r3, r3, #12
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d112      	bne.n	8002bbe <HAL_RCC_OscConfig+0x62>
 8002b98:	4b90      	ldr	r3, [pc, #576]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ba4:	d10b      	bne.n	8002bbe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba6:	4b8d      	ldr	r3, [pc, #564]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d06c      	beq.n	8002c8c <HAL_RCC_OscConfig+0x130>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d168      	bne.n	8002c8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e275      	b.n	80030aa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc6:	d106      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x7a>
 8002bc8:	4b84      	ldr	r3, [pc, #528]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a83      	ldr	r2, [pc, #524]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	e02e      	b.n	8002c34 <HAL_RCC_OscConfig+0xd8>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x9c>
 8002bde:	4b7f      	ldr	r3, [pc, #508]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a7e      	ldr	r2, [pc, #504]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	4b7c      	ldr	r3, [pc, #496]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a7b      	ldr	r2, [pc, #492]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002bf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	e01d      	b.n	8002c34 <HAL_RCC_OscConfig+0xd8>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c00:	d10c      	bne.n	8002c1c <HAL_RCC_OscConfig+0xc0>
 8002c02:	4b76      	ldr	r3, [pc, #472]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a75      	ldr	r2, [pc, #468]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	4b73      	ldr	r3, [pc, #460]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a72      	ldr	r2, [pc, #456]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	e00b      	b.n	8002c34 <HAL_RCC_OscConfig+0xd8>
 8002c1c:	4b6f      	ldr	r3, [pc, #444]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a6e      	ldr	r2, [pc, #440]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c26:	6013      	str	r3, [r2, #0]
 8002c28:	4b6c      	ldr	r3, [pc, #432]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a6b      	ldr	r2, [pc, #428]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d013      	beq.n	8002c64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fe fa1c 	bl	8001078 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c44:	f7fe fa18 	bl	8001078 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	; 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e229      	b.n	80030aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c56:	4b61      	ldr	r3, [pc, #388]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0xe8>
 8002c62:	e014      	b.n	8002c8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c64:	f7fe fa08 	bl	8001078 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c6c:	f7fe fa04 	bl	8001078 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b64      	cmp	r3, #100	; 0x64
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e215      	b.n	80030aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7e:	4b57      	ldr	r3, [pc, #348]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x110>
 8002c8a:	e000      	b.n	8002c8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d069      	beq.n	8002d6e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c9a:	4b50      	ldr	r3, [pc, #320]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 030c 	and.w	r3, r3, #12
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00b      	beq.n	8002cbe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ca6:	4b4d      	ldr	r3, [pc, #308]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d11c      	bne.n	8002cec <HAL_RCC_OscConfig+0x190>
 8002cb2:	4b4a      	ldr	r3, [pc, #296]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d116      	bne.n	8002cec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cbe:	4b47      	ldr	r3, [pc, #284]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d005      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x17a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d001      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e1e9      	b.n	80030aa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd6:	4b41      	ldr	r3, [pc, #260]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	493d      	ldr	r1, [pc, #244]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cea:	e040      	b.n	8002d6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d023      	beq.n	8002d3c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf4:	4b39      	ldr	r3, [pc, #228]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a38      	ldr	r2, [pc, #224]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe f9ba 	bl	8001078 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d08:	f7fe f9b6 	bl	8001078 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e1c7      	b.n	80030aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1a:	4b30      	ldr	r3, [pc, #192]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d26:	4b2d      	ldr	r3, [pc, #180]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4929      	ldr	r1, [pc, #164]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	600b      	str	r3, [r1, #0]
 8002d3a:	e018      	b.n	8002d6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d3c:	4b27      	ldr	r3, [pc, #156]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a26      	ldr	r2, [pc, #152]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002d42:	f023 0301 	bic.w	r3, r3, #1
 8002d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d48:	f7fe f996 	bl	8001078 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d50:	f7fe f992 	bl	8001078 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e1a3      	b.n	80030aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d62:	4b1e      	ldr	r3, [pc, #120]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d038      	beq.n	8002dec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d019      	beq.n	8002db6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d82:	4b16      	ldr	r3, [pc, #88]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d86:	4a15      	ldr	r2, [pc, #84]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8e:	f7fe f973 	bl	8001078 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d96:	f7fe f96f 	bl	8001078 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e180      	b.n	80030aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da8:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x23a>
 8002db4:	e01a      	b.n	8002dec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db6:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dba:	4a08      	ldr	r2, [pc, #32]	; (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002dbc:	f023 0301 	bic.w	r3, r3, #1
 8002dc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc2:	f7fe f959 	bl	8001078 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc8:	e00a      	b.n	8002de0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dca:	f7fe f955 	bl	8001078 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d903      	bls.n	8002de0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e166      	b.n	80030aa <HAL_RCC_OscConfig+0x54e>
 8002ddc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de0:	4b92      	ldr	r3, [pc, #584]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1ee      	bne.n	8002dca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 80a4 	beq.w	8002f42 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dfa:	4b8c      	ldr	r3, [pc, #560]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10d      	bne.n	8002e22 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e06:	4b89      	ldr	r3, [pc, #548]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	4a88      	ldr	r2, [pc, #544]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e10:	6413      	str	r3, [r2, #64]	; 0x40
 8002e12:	4b86      	ldr	r3, [pc, #536]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1a:	60bb      	str	r3, [r7, #8]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e22:	4b83      	ldr	r3, [pc, #524]	; (8003030 <HAL_RCC_OscConfig+0x4d4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d118      	bne.n	8002e60 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e2e:	4b80      	ldr	r3, [pc, #512]	; (8003030 <HAL_RCC_OscConfig+0x4d4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a7f      	ldr	r2, [pc, #508]	; (8003030 <HAL_RCC_OscConfig+0x4d4>)
 8002e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e3a:	f7fe f91d 	bl	8001078 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e42:	f7fe f919 	bl	8001078 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b64      	cmp	r3, #100	; 0x64
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e12a      	b.n	80030aa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e54:	4b76      	ldr	r3, [pc, #472]	; (8003030 <HAL_RCC_OscConfig+0x4d4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d106      	bne.n	8002e76 <HAL_RCC_OscConfig+0x31a>
 8002e68:	4b70      	ldr	r3, [pc, #448]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6c:	4a6f      	ldr	r2, [pc, #444]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	6713      	str	r3, [r2, #112]	; 0x70
 8002e74:	e02d      	b.n	8002ed2 <HAL_RCC_OscConfig+0x376>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10c      	bne.n	8002e98 <HAL_RCC_OscConfig+0x33c>
 8002e7e:	4b6b      	ldr	r3, [pc, #428]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	4a6a      	ldr	r2, [pc, #424]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002e84:	f023 0301 	bic.w	r3, r3, #1
 8002e88:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8a:	4b68      	ldr	r3, [pc, #416]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8e:	4a67      	ldr	r2, [pc, #412]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002e90:	f023 0304 	bic.w	r3, r3, #4
 8002e94:	6713      	str	r3, [r2, #112]	; 0x70
 8002e96:	e01c      	b.n	8002ed2 <HAL_RCC_OscConfig+0x376>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	2b05      	cmp	r3, #5
 8002e9e:	d10c      	bne.n	8002eba <HAL_RCC_OscConfig+0x35e>
 8002ea0:	4b62      	ldr	r3, [pc, #392]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	4a61      	ldr	r2, [pc, #388]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002ea6:	f043 0304 	orr.w	r3, r3, #4
 8002eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8002eac:	4b5f      	ldr	r3, [pc, #380]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb0:	4a5e      	ldr	r2, [pc, #376]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb8:	e00b      	b.n	8002ed2 <HAL_RCC_OscConfig+0x376>
 8002eba:	4b5c      	ldr	r3, [pc, #368]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebe:	4a5b      	ldr	r2, [pc, #364]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002ec0:	f023 0301 	bic.w	r3, r3, #1
 8002ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec6:	4b59      	ldr	r3, [pc, #356]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eca:	4a58      	ldr	r2, [pc, #352]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002ecc:	f023 0304 	bic.w	r3, r3, #4
 8002ed0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d015      	beq.n	8002f06 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eda:	f7fe f8cd 	bl	8001078 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee0:	e00a      	b.n	8002ef8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee2:	f7fe f8c9 	bl	8001078 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e0d8      	b.n	80030aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef8:	4b4c      	ldr	r3, [pc, #304]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0ee      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x386>
 8002f04:	e014      	b.n	8002f30 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f06:	f7fe f8b7 	bl	8001078 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f0c:	e00a      	b.n	8002f24 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0e:	f7fe f8b3 	bl	8001078 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e0c2      	b.n	80030aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f24:	4b41      	ldr	r3, [pc, #260]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1ee      	bne.n	8002f0e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f30:	7dfb      	ldrb	r3, [r7, #23]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d105      	bne.n	8002f42 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f36:	4b3d      	ldr	r3, [pc, #244]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	4a3c      	ldr	r2, [pc, #240]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 80ae 	beq.w	80030a8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f4c:	4b37      	ldr	r3, [pc, #220]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 030c 	and.w	r3, r3, #12
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d06d      	beq.n	8003034 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d14b      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f60:	4b32      	ldr	r3, [pc, #200]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a31      	ldr	r2, [pc, #196]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6c:	f7fe f884 	bl	8001078 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f74:	f7fe f880 	bl	8001078 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e091      	b.n	80030aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f86:	4b29      	ldr	r3, [pc, #164]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69da      	ldr	r2, [r3, #28]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	019b      	lsls	r3, r3, #6
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa8:	085b      	lsrs	r3, r3, #1
 8002faa:	3b01      	subs	r3, #1
 8002fac:	041b      	lsls	r3, r3, #16
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb4:	061b      	lsls	r3, r3, #24
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbc:	071b      	lsls	r3, r3, #28
 8002fbe:	491b      	ldr	r1, [pc, #108]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fc4:	4b19      	ldr	r3, [pc, #100]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a18      	ldr	r2, [pc, #96]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd0:	f7fe f852 	bl	8001078 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd8:	f7fe f84e 	bl	8001078 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e05f      	b.n	80030aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fea:	4b10      	ldr	r3, [pc, #64]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0f0      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x47c>
 8002ff6:	e057      	b.n	80030a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a0b      	ldr	r2, [pc, #44]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8002ffe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003004:	f7fe f838 	bl	8001078 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300c:	f7fe f834 	bl	8001078 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e045      	b.n	80030aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301e:	4b03      	ldr	r3, [pc, #12]	; (800302c <HAL_RCC_OscConfig+0x4d0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x4b0>
 800302a:	e03d      	b.n	80030a8 <HAL_RCC_OscConfig+0x54c>
 800302c:	40023800 	.word	0x40023800
 8003030:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003034:	4b1f      	ldr	r3, [pc, #124]	; (80030b4 <HAL_RCC_OscConfig+0x558>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d030      	beq.n	80030a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800304c:	429a      	cmp	r2, r3
 800304e:	d129      	bne.n	80030a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800305a:	429a      	cmp	r2, r3
 800305c:	d122      	bne.n	80030a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003064:	4013      	ands	r3, r2
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800306a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800306c:	4293      	cmp	r3, r2
 800306e:	d119      	bne.n	80030a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	085b      	lsrs	r3, r3, #1
 800307c:	3b01      	subs	r3, #1
 800307e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003080:	429a      	cmp	r2, r3
 8003082:	d10f      	bne.n	80030a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003090:	429a      	cmp	r2, r3
 8003092:	d107      	bne.n	80030a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e000      	b.n	80030aa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800

080030b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0d0      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030d0:	4b6a      	ldr	r3, [pc, #424]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 030f 	and.w	r3, r3, #15
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d910      	bls.n	8003100 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030de:	4b67      	ldr	r3, [pc, #412]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 020f 	bic.w	r2, r3, #15
 80030e6:	4965      	ldr	r1, [pc, #404]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ee:	4b63      	ldr	r3, [pc, #396]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d001      	beq.n	8003100 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0b8      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d020      	beq.n	800314e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003118:	4b59      	ldr	r3, [pc, #356]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	4a58      	ldr	r2, [pc, #352]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 800311e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003122:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003130:	4b53      	ldr	r3, [pc, #332]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	4a52      	ldr	r2, [pc, #328]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 8003136:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800313a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800313c:	4b50      	ldr	r3, [pc, #320]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	494d      	ldr	r1, [pc, #308]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 800314a:	4313      	orrs	r3, r2
 800314c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d040      	beq.n	80031dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d107      	bne.n	8003172 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003162:	4b47      	ldr	r3, [pc, #284]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d115      	bne.n	800319a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e07f      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d107      	bne.n	800318a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800317a:	4b41      	ldr	r3, [pc, #260]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d109      	bne.n	800319a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e073      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318a:	4b3d      	ldr	r3, [pc, #244]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e06b      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800319a:	4b39      	ldr	r3, [pc, #228]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f023 0203 	bic.w	r2, r3, #3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4936      	ldr	r1, [pc, #216]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ac:	f7fd ff64 	bl	8001078 <HAL_GetTick>
 80031b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b2:	e00a      	b.n	80031ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b4:	f7fd ff60 	bl	8001078 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e053      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ca:	4b2d      	ldr	r3, [pc, #180]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 020c 	and.w	r2, r3, #12
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	429a      	cmp	r2, r3
 80031da:	d1eb      	bne.n	80031b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031dc:	4b27      	ldr	r3, [pc, #156]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 030f 	and.w	r3, r3, #15
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d210      	bcs.n	800320c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ea:	4b24      	ldr	r3, [pc, #144]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 020f 	bic.w	r2, r3, #15
 80031f2:	4922      	ldr	r1, [pc, #136]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fa:	4b20      	ldr	r3, [pc, #128]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e032      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d008      	beq.n	800322a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003218:	4b19      	ldr	r3, [pc, #100]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	4916      	ldr	r1, [pc, #88]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 8003226:	4313      	orrs	r3, r2
 8003228:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d009      	beq.n	800324a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003236:	4b12      	ldr	r3, [pc, #72]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	490e      	ldr	r1, [pc, #56]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 8003246:	4313      	orrs	r3, r2
 8003248:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800324a:	f000 f885 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 800324e:	4601      	mov	r1, r0
 8003250:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	091b      	lsrs	r3, r3, #4
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	4a0a      	ldr	r2, [pc, #40]	; (8003284 <HAL_RCC_ClockConfig+0x1cc>)
 800325c:	5cd3      	ldrb	r3, [r2, r3]
 800325e:	fa21 f303 	lsr.w	r3, r1, r3
 8003262:	4a09      	ldr	r2, [pc, #36]	; (8003288 <HAL_RCC_ClockConfig+0x1d0>)
 8003264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003266:	4b09      	ldr	r3, [pc, #36]	; (800328c <HAL_RCC_ClockConfig+0x1d4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7fd fd6a 	bl	8000d44 <HAL_InitTick>

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40023c00 	.word	0x40023c00
 8003280:	40023800 	.word	0x40023800
 8003284:	08005d90 	.word	0x08005d90
 8003288:	20000000 	.word	0x20000000
 800328c:	20000004 	.word	0x20000004

08003290 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b08c      	sub	sp, #48	; 0x30
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d127      	bne.n	80032f2 <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80032a2:	4b2a      	ldr	r3, [pc, #168]	; (800334c <HAL_RCC_MCOConfig+0xbc>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	4a29      	ldr	r2, [pc, #164]	; (800334c <HAL_RCC_MCOConfig+0xbc>)
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	6313      	str	r3, [r2, #48]	; 0x30
 80032ae:	4b27      	ldr	r3, [pc, #156]	; (800334c <HAL_RCC_MCOConfig+0xbc>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	61bb      	str	r3, [r7, #24]
 80032b8:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80032ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c0:	2302      	movs	r3, #2
 80032c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80032c4:	2303      	movs	r3, #3
 80032c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80032cc:	2300      	movs	r3, #0
 80032ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80032d0:	f107 031c 	add.w	r3, r7, #28
 80032d4:	4619      	mov	r1, r3
 80032d6:	481e      	ldr	r0, [pc, #120]	; (8003350 <HAL_RCC_MCOConfig+0xc0>)
 80032d8:	f7fe fb00 	bl	80018dc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80032dc:	4b1b      	ldr	r3, [pc, #108]	; (800334c <HAL_RCC_MCOConfig+0xbc>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	430b      	orrs	r3, r1
 80032ea:	4918      	ldr	r1, [pc, #96]	; (800334c <HAL_RCC_MCOConfig+0xbc>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 80032f0:	e027      	b.n	8003342 <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 80032f2:	4b16      	ldr	r3, [pc, #88]	; (800334c <HAL_RCC_MCOConfig+0xbc>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	4a15      	ldr	r2, [pc, #84]	; (800334c <HAL_RCC_MCOConfig+0xbc>)
 80032f8:	f043 0304 	orr.w	r3, r3, #4
 80032fc:	6313      	str	r3, [r2, #48]	; 0x30
 80032fe:	4b13      	ldr	r3, [pc, #76]	; (800334c <HAL_RCC_MCOConfig+0xbc>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800330a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800330e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003310:	2302      	movs	r3, #2
 8003312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003314:	2303      	movs	r3, #3
 8003316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003318:	2300      	movs	r3, #0
 800331a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800331c:	2300      	movs	r3, #0
 800331e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003320:	f107 031c 	add.w	r3, r7, #28
 8003324:	4619      	mov	r1, r3
 8003326:	480b      	ldr	r0, [pc, #44]	; (8003354 <HAL_RCC_MCOConfig+0xc4>)
 8003328:	f7fe fad8 	bl	80018dc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 800332c:	4b07      	ldr	r3, [pc, #28]	; (800334c <HAL_RCC_MCOConfig+0xbc>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	00d9      	lsls	r1, r3, #3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	430b      	orrs	r3, r1
 800333c:	4903      	ldr	r1, [pc, #12]	; (800334c <HAL_RCC_MCOConfig+0xbc>)
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
}
 8003342:	bf00      	nop
 8003344:	3730      	adds	r7, #48	; 0x30
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40023800 	.word	0x40023800
 8003350:	40020000 	.word	0x40020000
 8003354:	40020800 	.word	0x40020800

08003358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800335e:	2300      	movs	r3, #0
 8003360:	607b      	str	r3, [r7, #4]
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	2300      	movs	r3, #0
 8003368:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800336a:	2300      	movs	r3, #0
 800336c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800336e:	4b50      	ldr	r3, [pc, #320]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b04      	cmp	r3, #4
 8003378:	d007      	beq.n	800338a <HAL_RCC_GetSysClockFreq+0x32>
 800337a:	2b08      	cmp	r3, #8
 800337c:	d008      	beq.n	8003390 <HAL_RCC_GetSysClockFreq+0x38>
 800337e:	2b00      	cmp	r3, #0
 8003380:	f040 808d 	bne.w	800349e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003384:	4b4b      	ldr	r3, [pc, #300]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003386:	60bb      	str	r3, [r7, #8]
      break;
 8003388:	e08c      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800338a:	4b4b      	ldr	r3, [pc, #300]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800338c:	60bb      	str	r3, [r7, #8]
      break;
 800338e:	e089      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003390:	4b47      	ldr	r3, [pc, #284]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003398:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800339a:	4b45      	ldr	r3, [pc, #276]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x158>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d023      	beq.n	80033ee <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a6:	4b42      	ldr	r3, [pc, #264]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x158>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	099b      	lsrs	r3, r3, #6
 80033ac:	f04f 0400 	mov.w	r4, #0
 80033b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	ea03 0501 	and.w	r5, r3, r1
 80033bc:	ea04 0602 	and.w	r6, r4, r2
 80033c0:	4a3d      	ldr	r2, [pc, #244]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80033c2:	fb02 f106 	mul.w	r1, r2, r6
 80033c6:	2200      	movs	r2, #0
 80033c8:	fb02 f205 	mul.w	r2, r2, r5
 80033cc:	440a      	add	r2, r1
 80033ce:	493a      	ldr	r1, [pc, #232]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80033d0:	fba5 0101 	umull	r0, r1, r5, r1
 80033d4:	1853      	adds	r3, r2, r1
 80033d6:	4619      	mov	r1, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f04f 0400 	mov.w	r4, #0
 80033de:	461a      	mov	r2, r3
 80033e0:	4623      	mov	r3, r4
 80033e2:	f7fc ff35 	bl	8000250 <__aeabi_uldivmod>
 80033e6:	4603      	mov	r3, r0
 80033e8:	460c      	mov	r4, r1
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	e049      	b.n	8003482 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ee:	4b30      	ldr	r3, [pc, #192]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x158>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	099b      	lsrs	r3, r3, #6
 80033f4:	f04f 0400 	mov.w	r4, #0
 80033f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	ea03 0501 	and.w	r5, r3, r1
 8003404:	ea04 0602 	and.w	r6, r4, r2
 8003408:	4629      	mov	r1, r5
 800340a:	4632      	mov	r2, r6
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	f04f 0400 	mov.w	r4, #0
 8003414:	0154      	lsls	r4, r2, #5
 8003416:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800341a:	014b      	lsls	r3, r1, #5
 800341c:	4619      	mov	r1, r3
 800341e:	4622      	mov	r2, r4
 8003420:	1b49      	subs	r1, r1, r5
 8003422:	eb62 0206 	sbc.w	r2, r2, r6
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	f04f 0400 	mov.w	r4, #0
 800342e:	0194      	lsls	r4, r2, #6
 8003430:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003434:	018b      	lsls	r3, r1, #6
 8003436:	1a5b      	subs	r3, r3, r1
 8003438:	eb64 0402 	sbc.w	r4, r4, r2
 800343c:	f04f 0100 	mov.w	r1, #0
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	00e2      	lsls	r2, r4, #3
 8003446:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800344a:	00d9      	lsls	r1, r3, #3
 800344c:	460b      	mov	r3, r1
 800344e:	4614      	mov	r4, r2
 8003450:	195b      	adds	r3, r3, r5
 8003452:	eb44 0406 	adc.w	r4, r4, r6
 8003456:	f04f 0100 	mov.w	r1, #0
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	02a2      	lsls	r2, r4, #10
 8003460:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003464:	0299      	lsls	r1, r3, #10
 8003466:	460b      	mov	r3, r1
 8003468:	4614      	mov	r4, r2
 800346a:	4618      	mov	r0, r3
 800346c:	4621      	mov	r1, r4
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f04f 0400 	mov.w	r4, #0
 8003474:	461a      	mov	r2, r3
 8003476:	4623      	mov	r3, r4
 8003478:	f7fc feea 	bl	8000250 <__aeabi_uldivmod>
 800347c:	4603      	mov	r3, r0
 800347e:	460c      	mov	r4, r1
 8003480:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003482:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	0c1b      	lsrs	r3, r3, #16
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	3301      	adds	r3, #1
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	fbb2 f3f3 	udiv	r3, r2, r3
 800349a:	60bb      	str	r3, [r7, #8]
      break;
 800349c:	e002      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800349e:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80034a0:	60bb      	str	r3, [r7, #8]
      break;
 80034a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034a4:	68bb      	ldr	r3, [r7, #8]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40023800 	.word	0x40023800
 80034b4:	00f42400 	.word	0x00f42400
 80034b8:	017d7840 	.word	0x017d7840

080034bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c0:	4b03      	ldr	r3, [pc, #12]	; (80034d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034c2:	681b      	ldr	r3, [r3, #0]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	20000000 	.word	0x20000000

080034d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034d8:	f7ff fff0 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 80034dc:	4601      	mov	r1, r0
 80034de:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	0a9b      	lsrs	r3, r3, #10
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	4a03      	ldr	r2, [pc, #12]	; (80034f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ea:	5cd3      	ldrb	r3, [r2, r3]
 80034ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40023800 	.word	0x40023800
 80034f8:	08005da0 	.word	0x08005da0

080034fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003500:	f7ff ffdc 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 8003504:	4601      	mov	r1, r0
 8003506:	4b05      	ldr	r3, [pc, #20]	; (800351c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	0b5b      	lsrs	r3, r3, #13
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	4a03      	ldr	r2, [pc, #12]	; (8003520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003512:	5cd3      	ldrb	r3, [r2, r3]
 8003514:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003518:	4618      	mov	r0, r3
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40023800 	.word	0x40023800
 8003520:	08005da0 	.word	0x08005da0

08003524 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	220f      	movs	r2, #15
 8003532:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003534:	4b12      	ldr	r3, [pc, #72]	; (8003580 <HAL_RCC_GetClockConfig+0x5c>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 0203 	and.w	r2, r3, #3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003540:	4b0f      	ldr	r3, [pc, #60]	; (8003580 <HAL_RCC_GetClockConfig+0x5c>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800354c:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <HAL_RCC_GetClockConfig+0x5c>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003558:	4b09      	ldr	r3, [pc, #36]	; (8003580 <HAL_RCC_GetClockConfig+0x5c>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	08db      	lsrs	r3, r3, #3
 800355e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003566:	4b07      	ldr	r3, [pc, #28]	; (8003584 <HAL_RCC_GetClockConfig+0x60>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 020f 	and.w	r2, r3, #15
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	601a      	str	r2, [r3, #0]
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	40023800 	.word	0x40023800
 8003584:	40023c00 	.word	0x40023c00

08003588 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003594:	2300      	movs	r3, #0
 8003596:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003598:	2300      	movs	r3, #0
 800359a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800359c:	2300      	movs	r3, #0
 800359e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d012      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035b0:	4b69      	ldr	r3, [pc, #420]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	4a68      	ldr	r2, [pc, #416]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80035ba:	6093      	str	r3, [r2, #8]
 80035bc:	4b66      	ldr	r3, [pc, #408]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c4:	4964      	ldr	r1, [pc, #400]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80035d2:	2301      	movs	r3, #1
 80035d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d017      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035e2:	4b5d      	ldr	r3, [pc, #372]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f0:	4959      	ldr	r1, [pc, #356]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003600:	d101      	bne.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003602:	2301      	movs	r3, #1
 8003604:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800360e:	2301      	movs	r3, #1
 8003610:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d017      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800361e:	4b4e      	ldr	r3, [pc, #312]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003620:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003624:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	494a      	ldr	r1, [pc, #296]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800363c:	d101      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800363e:	2301      	movs	r3, #1
 8003640:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800364a:	2301      	movs	r3, #1
 800364c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800365a:	2301      	movs	r3, #1
 800365c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 808b 	beq.w	8003782 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800366c:	4b3a      	ldr	r3, [pc, #232]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003670:	4a39      	ldr	r2, [pc, #228]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003676:	6413      	str	r3, [r2, #64]	; 0x40
 8003678:	4b37      	ldr	r3, [pc, #220]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003680:	60bb      	str	r3, [r7, #8]
 8003682:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003684:	4b35      	ldr	r3, [pc, #212]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a34      	ldr	r2, [pc, #208]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800368a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003690:	f7fd fcf2 	bl	8001078 <HAL_GetTick>
 8003694:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003698:	f7fd fcee 	bl	8001078 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b64      	cmp	r3, #100	; 0x64
 80036a4:	d901      	bls.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e38d      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80036aa:	4b2c      	ldr	r3, [pc, #176]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036b6:	4b28      	ldr	r3, [pc, #160]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d035      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d02e      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036d4:	4b20      	ldr	r3, [pc, #128]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036de:	4b1e      	ldr	r3, [pc, #120]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e2:	4a1d      	ldr	r2, [pc, #116]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036ea:	4b1b      	ldr	r3, [pc, #108]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ee:	4a1a      	ldr	r2, [pc, #104]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80036f6:	4a18      	ldr	r2, [pc, #96]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80036fc:	4b16      	ldr	r3, [pc, #88]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b01      	cmp	r3, #1
 8003706:	d114      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003708:	f7fd fcb6 	bl	8001078 <HAL_GetTick>
 800370c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370e:	e00a      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003710:	f7fd fcb2 	bl	8001078 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	f241 3288 	movw	r2, #5000	; 0x1388
 800371e:	4293      	cmp	r3, r2
 8003720:	d901      	bls.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e34f      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003726:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0ee      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800373a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800373e:	d111      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003740:	4b05      	ldr	r3, [pc, #20]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800374c:	4b04      	ldr	r3, [pc, #16]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800374e:	400b      	ands	r3, r1
 8003750:	4901      	ldr	r1, [pc, #4]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003752:	4313      	orrs	r3, r2
 8003754:	608b      	str	r3, [r1, #8]
 8003756:	e00b      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003758:	40023800 	.word	0x40023800
 800375c:	40007000 	.word	0x40007000
 8003760:	0ffffcff 	.word	0x0ffffcff
 8003764:	4bb3      	ldr	r3, [pc, #716]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	4ab2      	ldr	r2, [pc, #712]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800376a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800376e:	6093      	str	r3, [r2, #8]
 8003770:	4bb0      	ldr	r3, [pc, #704]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003772:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800377c:	49ad      	ldr	r1, [pc, #692]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800377e:	4313      	orrs	r3, r2
 8003780:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0310 	and.w	r3, r3, #16
 800378a:	2b00      	cmp	r3, #0
 800378c:	d010      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800378e:	4ba9      	ldr	r3, [pc, #676]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003794:	4aa7      	ldr	r2, [pc, #668]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800379a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800379e:	4ba5      	ldr	r3, [pc, #660]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a8:	49a2      	ldr	r1, [pc, #648]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037bc:	4b9d      	ldr	r3, [pc, #628]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037ca:	499a      	ldr	r1, [pc, #616]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037de:	4b95      	ldr	r3, [pc, #596]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037ec:	4991      	ldr	r1, [pc, #580]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003800:	4b8c      	ldr	r3, [pc, #560]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003806:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800380e:	4989      	ldr	r1, [pc, #548]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003822:	4b84      	ldr	r3, [pc, #528]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003828:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003830:	4980      	ldr	r1, [pc, #512]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003844:	4b7b      	ldr	r3, [pc, #492]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384a:	f023 0203 	bic.w	r2, r3, #3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	4978      	ldr	r1, [pc, #480]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003866:	4b73      	ldr	r3, [pc, #460]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386c:	f023 020c 	bic.w	r2, r3, #12
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003874:	496f      	ldr	r1, [pc, #444]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003888:	4b6a      	ldr	r3, [pc, #424]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003896:	4967      	ldr	r1, [pc, #412]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038aa:	4b62      	ldr	r3, [pc, #392]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b8:	495e      	ldr	r1, [pc, #376]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038cc:	4b59      	ldr	r3, [pc, #356]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038da:	4956      	ldr	r1, [pc, #344]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80038ee:	4b51      	ldr	r3, [pc, #324]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fc:	494d      	ldr	r1, [pc, #308]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003910:	4b48      	ldr	r3, [pc, #288]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003916:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391e:	4945      	ldr	r1, [pc, #276]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003932:	4b40      	ldr	r3, [pc, #256]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003938:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003940:	493c      	ldr	r1, [pc, #240]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003954:	4b37      	ldr	r3, [pc, #220]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003962:	4934      	ldr	r1, [pc, #208]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d011      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003976:	4b2f      	ldr	r3, [pc, #188]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003984:	492b      	ldr	r1, [pc, #172]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003990:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003994:	d101      	bne.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003996:	2301      	movs	r3, #1
 8003998:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0308 	and.w	r3, r3, #8
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80039a6:	2301      	movs	r3, #1
 80039a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039b6:	4b1f      	ldr	r3, [pc, #124]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039bc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c4:	491b      	ldr	r1, [pc, #108]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00b      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039d8:	4b16      	ldr	r3, [pc, #88]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039e8:	4912      	ldr	r1, [pc, #72]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00b      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80039fc:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a02:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a0c:	4909      	ldr	r1, [pc, #36]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00f      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a20:	4b04      	ldr	r3, [pc, #16]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a26:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a30:	e002      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003a32:	bf00      	nop
 8003a34:	40023800 	.word	0x40023800
 8003a38:	4985      	ldr	r1, [pc, #532]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00b      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003a4c:	4b80      	ldr	r3, [pc, #512]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a52:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a5c:	497c      	ldr	r1, [pc, #496]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d005      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a72:	f040 80d6 	bne.w	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a76:	4b76      	ldr	r3, [pc, #472]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a75      	ldr	r2, [pc, #468]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a82:	f7fd faf9 	bl	8001078 <HAL_GetTick>
 8003a86:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a88:	e008      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a8a:	f7fd faf5 	bl	8001078 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b64      	cmp	r3, #100	; 0x64
 8003a96:	d901      	bls.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e194      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a9c:	4b6c      	ldr	r3, [pc, #432]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1f0      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d021      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d11d      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003abc:	4b64      	ldr	r3, [pc, #400]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac2:	0c1b      	lsrs	r3, r3, #16
 8003ac4:	f003 0303 	and.w	r3, r3, #3
 8003ac8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003aca:	4b61      	ldr	r3, [pc, #388]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ad0:	0e1b      	lsrs	r3, r3, #24
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	019a      	lsls	r2, r3, #6
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	041b      	lsls	r3, r3, #16
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	061b      	lsls	r3, r3, #24
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	071b      	lsls	r3, r3, #28
 8003af0:	4957      	ldr	r1, [pc, #348]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d004      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b0c:	d00a      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d02e      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b22:	d129      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b24:	4b4a      	ldr	r3, [pc, #296]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b2a:	0c1b      	lsrs	r3, r3, #16
 8003b2c:	f003 0303 	and.w	r3, r3, #3
 8003b30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b32:	4b47      	ldr	r3, [pc, #284]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b38:	0f1b      	lsrs	r3, r3, #28
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	019a      	lsls	r2, r3, #6
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	041b      	lsls	r3, r3, #16
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	061b      	lsls	r3, r3, #24
 8003b52:	431a      	orrs	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	071b      	lsls	r3, r3, #28
 8003b58:	493d      	ldr	r1, [pc, #244]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b60:	4b3b      	ldr	r3, [pc, #236]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b66:	f023 021f 	bic.w	r2, r3, #31
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	4937      	ldr	r1, [pc, #220]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d01d      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b84:	4b32      	ldr	r3, [pc, #200]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b8a:	0e1b      	lsrs	r3, r3, #24
 8003b8c:	f003 030f 	and.w	r3, r3, #15
 8003b90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b92:	4b2f      	ldr	r3, [pc, #188]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b98:	0f1b      	lsrs	r3, r3, #28
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	019a      	lsls	r2, r3, #6
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	041b      	lsls	r3, r3, #16
 8003bac:	431a      	orrs	r2, r3
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	061b      	lsls	r3, r3, #24
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	071b      	lsls	r3, r3, #28
 8003bb8:	4925      	ldr	r1, [pc, #148]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d011      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	019a      	lsls	r2, r3, #6
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	041b      	lsls	r3, r3, #16
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	061b      	lsls	r3, r3, #24
 8003be0:	431a      	orrs	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	071b      	lsls	r3, r3, #28
 8003be8:	4919      	ldr	r1, [pc, #100]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003bf0:	4b17      	ldr	r3, [pc, #92]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a16      	ldr	r2, [pc, #88]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003bf6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bfc:	f7fd fa3c 	bl	8001078 <HAL_GetTick>
 8003c00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c04:	f7fd fa38 	bl	8001078 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b64      	cmp	r3, #100	; 0x64
 8003c10:	d901      	bls.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e0d7      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c16:	4b0e      	ldr	r3, [pc, #56]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0f0      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	f040 80cd 	bne.w	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c2a:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a08      	ldr	r2, [pc, #32]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c36:	f7fd fa1f 	bl	8001078 <HAL_GetTick>
 8003c3a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c3c:	e00a      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c3e:	f7fd fa1b 	bl	8001078 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b64      	cmp	r3, #100	; 0x64
 8003c4a:	d903      	bls.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e0ba      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003c50:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c54:	4b5e      	ldr	r3, [pc, #376]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c60:	d0ed      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d009      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d02e      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d12a      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c8a:	4b51      	ldr	r3, [pc, #324]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c90:	0c1b      	lsrs	r3, r3, #16
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c98:	4b4d      	ldr	r3, [pc, #308]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9e:	0f1b      	lsrs	r3, r3, #28
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	019a      	lsls	r2, r3, #6
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	041b      	lsls	r3, r3, #16
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	061b      	lsls	r3, r3, #24
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	071b      	lsls	r3, r3, #28
 8003cbe:	4944      	ldr	r1, [pc, #272]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003cc6:	4b42      	ldr	r3, [pc, #264]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ccc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	021b      	lsls	r3, r3, #8
 8003cd8:	493d      	ldr	r1, [pc, #244]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d022      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cf4:	d11d      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cf6:	4b36      	ldr	r3, [pc, #216]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfc:	0e1b      	lsrs	r3, r3, #24
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d04:	4b32      	ldr	r3, [pc, #200]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0a:	0f1b      	lsrs	r3, r3, #28
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	019a      	lsls	r2, r3, #6
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	041b      	lsls	r3, r3, #16
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	061b      	lsls	r3, r3, #24
 8003d24:	431a      	orrs	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	071b      	lsls	r3, r3, #28
 8003d2a:	4929      	ldr	r1, [pc, #164]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0308 	and.w	r3, r3, #8
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d028      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d3e:	4b24      	ldr	r3, [pc, #144]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d44:	0e1b      	lsrs	r3, r3, #24
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d4c:	4b20      	ldr	r3, [pc, #128]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d52:	0c1b      	lsrs	r3, r3, #16
 8003d54:	f003 0303 	and.w	r3, r3, #3
 8003d58:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	019a      	lsls	r2, r3, #6
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	041b      	lsls	r3, r3, #16
 8003d64:	431a      	orrs	r2, r3
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	061b      	lsls	r3, r3, #24
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	071b      	lsls	r3, r3, #28
 8003d72:	4917      	ldr	r1, [pc, #92]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d7a:	4b15      	ldr	r3, [pc, #84]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	4911      	ldr	r1, [pc, #68]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d90:	4b0f      	ldr	r3, [pc, #60]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a0e      	ldr	r2, [pc, #56]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d9c:	f7fd f96c 	bl	8001078 <HAL_GetTick>
 8003da0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003da4:	f7fd f968 	bl	8001078 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b64      	cmp	r3, #100	; 0x64
 8003db0:	d901      	bls.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e007      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003db6:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc2:	d1ef      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3720      	adds	r7, #32
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	40023800 	.word	0x40023800

08003dd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e01d      	b.n	8003e22 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7fc fe7c 	bl	8000af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	4619      	mov	r1, r3
 8003e12:	4610      	mov	r0, r2
 8003e14:	f000 f97c 	bl	8004110 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0201 	orr.w	r2, r2, #1
 8003e42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <HAL_TIM_Base_Start_IT+0x50>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b06      	cmp	r3, #6
 8003e54:	d00b      	beq.n	8003e6e <HAL_TIM_Base_Start_IT+0x42>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e5c:	d007      	beq.n	8003e6e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f042 0201 	orr.w	r2, r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	00010007 	.word	0x00010007

08003e80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d122      	bne.n	8003edc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d11b      	bne.n	8003edc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f06f 0202 	mvn.w	r2, #2
 8003eac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f905 	bl	80040d2 <HAL_TIM_IC_CaptureCallback>
 8003ec8:	e005      	b.n	8003ed6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f8f7 	bl	80040be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f908 	bl	80040e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	f003 0304 	and.w	r3, r3, #4
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d122      	bne.n	8003f30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	d11b      	bne.n	8003f30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f06f 0204 	mvn.w	r2, #4
 8003f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2202      	movs	r2, #2
 8003f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f8db 	bl	80040d2 <HAL_TIM_IC_CaptureCallback>
 8003f1c:	e005      	b.n	8003f2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f8cd 	bl	80040be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f8de 	bl	80040e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d122      	bne.n	8003f84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f003 0308 	and.w	r3, r3, #8
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d11b      	bne.n	8003f84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f06f 0208 	mvn.w	r2, #8
 8003f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2204      	movs	r2, #4
 8003f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f8b1 	bl	80040d2 <HAL_TIM_IC_CaptureCallback>
 8003f70:	e005      	b.n	8003f7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f8a3 	bl	80040be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f8b4 	bl	80040e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	f003 0310 	and.w	r3, r3, #16
 8003f8e:	2b10      	cmp	r3, #16
 8003f90:	d122      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f003 0310 	and.w	r3, r3, #16
 8003f9c:	2b10      	cmp	r3, #16
 8003f9e:	d11b      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f06f 0210 	mvn.w	r2, #16
 8003fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2208      	movs	r2, #8
 8003fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f887 	bl	80040d2 <HAL_TIM_IC_CaptureCallback>
 8003fc4:	e005      	b.n	8003fd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f879 	bl	80040be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f88a 	bl	80040e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d10e      	bne.n	8004004 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d107      	bne.n	8004004 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f06f 0201 	mvn.w	r2, #1
 8003ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fc fd3c 	bl	8000a7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400e:	2b80      	cmp	r3, #128	; 0x80
 8004010:	d10e      	bne.n	8004030 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401c:	2b80      	cmp	r3, #128	; 0x80
 800401e:	d107      	bne.n	8004030 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f91a 	bl	8004264 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800403e:	d10e      	bne.n	800405e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404a:	2b80      	cmp	r3, #128	; 0x80
 800404c:	d107      	bne.n	800405e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f90d 	bl	8004278 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004068:	2b40      	cmp	r3, #64	; 0x40
 800406a:	d10e      	bne.n	800408a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004076:	2b40      	cmp	r3, #64	; 0x40
 8004078:	d107      	bne.n	800408a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f838 	bl	80040fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	f003 0320 	and.w	r3, r3, #32
 8004094:	2b20      	cmp	r3, #32
 8004096:	d10e      	bne.n	80040b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	2b20      	cmp	r3, #32
 80040a4:	d107      	bne.n	80040b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f06f 0220 	mvn.w	r2, #32
 80040ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f8cd 	bl	8004250 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040b6:	bf00      	nop
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
	...

08004110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a40      	ldr	r2, [pc, #256]	; (8004224 <TIM_Base_SetConfig+0x114>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d013      	beq.n	8004150 <TIM_Base_SetConfig+0x40>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800412e:	d00f      	beq.n	8004150 <TIM_Base_SetConfig+0x40>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a3d      	ldr	r2, [pc, #244]	; (8004228 <TIM_Base_SetConfig+0x118>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d00b      	beq.n	8004150 <TIM_Base_SetConfig+0x40>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a3c      	ldr	r2, [pc, #240]	; (800422c <TIM_Base_SetConfig+0x11c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d007      	beq.n	8004150 <TIM_Base_SetConfig+0x40>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a3b      	ldr	r2, [pc, #236]	; (8004230 <TIM_Base_SetConfig+0x120>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d003      	beq.n	8004150 <TIM_Base_SetConfig+0x40>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a3a      	ldr	r2, [pc, #232]	; (8004234 <TIM_Base_SetConfig+0x124>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d108      	bne.n	8004162 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004156:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	4313      	orrs	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a2f      	ldr	r2, [pc, #188]	; (8004224 <TIM_Base_SetConfig+0x114>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d02b      	beq.n	80041c2 <TIM_Base_SetConfig+0xb2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004170:	d027      	beq.n	80041c2 <TIM_Base_SetConfig+0xb2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a2c      	ldr	r2, [pc, #176]	; (8004228 <TIM_Base_SetConfig+0x118>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d023      	beq.n	80041c2 <TIM_Base_SetConfig+0xb2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a2b      	ldr	r2, [pc, #172]	; (800422c <TIM_Base_SetConfig+0x11c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d01f      	beq.n	80041c2 <TIM_Base_SetConfig+0xb2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a2a      	ldr	r2, [pc, #168]	; (8004230 <TIM_Base_SetConfig+0x120>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d01b      	beq.n	80041c2 <TIM_Base_SetConfig+0xb2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a29      	ldr	r2, [pc, #164]	; (8004234 <TIM_Base_SetConfig+0x124>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d017      	beq.n	80041c2 <TIM_Base_SetConfig+0xb2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a28      	ldr	r2, [pc, #160]	; (8004238 <TIM_Base_SetConfig+0x128>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d013      	beq.n	80041c2 <TIM_Base_SetConfig+0xb2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a27      	ldr	r2, [pc, #156]	; (800423c <TIM_Base_SetConfig+0x12c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d00f      	beq.n	80041c2 <TIM_Base_SetConfig+0xb2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a26      	ldr	r2, [pc, #152]	; (8004240 <TIM_Base_SetConfig+0x130>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00b      	beq.n	80041c2 <TIM_Base_SetConfig+0xb2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a25      	ldr	r2, [pc, #148]	; (8004244 <TIM_Base_SetConfig+0x134>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d007      	beq.n	80041c2 <TIM_Base_SetConfig+0xb2>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a24      	ldr	r2, [pc, #144]	; (8004248 <TIM_Base_SetConfig+0x138>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d003      	beq.n	80041c2 <TIM_Base_SetConfig+0xb2>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a23      	ldr	r2, [pc, #140]	; (800424c <TIM_Base_SetConfig+0x13c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d108      	bne.n	80041d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	4313      	orrs	r3, r2
 80041e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a0a      	ldr	r2, [pc, #40]	; (8004224 <TIM_Base_SetConfig+0x114>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d003      	beq.n	8004208 <TIM_Base_SetConfig+0xf8>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a0c      	ldr	r2, [pc, #48]	; (8004234 <TIM_Base_SetConfig+0x124>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d103      	bne.n	8004210 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	615a      	str	r2, [r3, #20]
}
 8004216:	bf00      	nop
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40010000 	.word	0x40010000
 8004228:	40000400 	.word	0x40000400
 800422c:	40000800 	.word	0x40000800
 8004230:	40000c00 	.word	0x40000c00
 8004234:	40010400 	.word	0x40010400
 8004238:	40014000 	.word	0x40014000
 800423c:	40014400 	.word	0x40014400
 8004240:	40014800 	.word	0x40014800
 8004244:	40001800 	.word	0x40001800
 8004248:	40001c00 	.word	0x40001c00
 800424c:	40002000 	.word	0x40002000

08004250 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e040      	b.n	8004320 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fc fc6a 	bl	8000b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2224      	movs	r2, #36	; 0x24
 80042b8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0201 	bic.w	r2, r2, #1
 80042c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 fb20 	bl	8004910 <UART_SetConfig>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e022      	b.n	8004320 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 fdbe 	bl	8004e64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004306:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0201 	orr.w	r2, r2, #1
 8004316:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 fe45 	bl	8004fa8 <UART_CheckIdleState>
 800431e:	4603      	mov	r3, r0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08a      	sub	sp, #40	; 0x28
 800432c:	af02      	add	r7, sp, #8
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	603b      	str	r3, [r7, #0]
 8004334:	4613      	mov	r3, r2
 8004336:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800433c:	2b20      	cmp	r3, #32
 800433e:	d17f      	bne.n	8004440 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <HAL_UART_Transmit+0x24>
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e078      	b.n	8004442 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_UART_Transmit+0x36>
 800435a:	2302      	movs	r3, #2
 800435c:	e071      	b.n	8004442 <HAL_UART_Transmit+0x11a>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2221      	movs	r2, #33	; 0x21
 8004370:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004372:	f7fc fe81 	bl	8001078 <HAL_GetTick>
 8004376:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	88fa      	ldrh	r2, [r7, #6]
 800437c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	88fa      	ldrh	r2, [r7, #6]
 8004384:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004390:	d108      	bne.n	80043a4 <HAL_UART_Transmit+0x7c>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d104      	bne.n	80043a4 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800439a:	2300      	movs	r3, #0
 800439c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	61bb      	str	r3, [r7, #24]
 80043a2:	e003      	b.n	80043ac <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043a8:	2300      	movs	r3, #0
 80043aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80043b4:	e02c      	b.n	8004410 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2200      	movs	r2, #0
 80043be:	2180      	movs	r1, #128	; 0x80
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 fe36 	bl	8005032 <UART_WaitOnFlagUntilTimeout>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e038      	b.n	8004442 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10b      	bne.n	80043ee <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	461a      	mov	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	3302      	adds	r3, #2
 80043ea:	61bb      	str	r3, [r7, #24]
 80043ec:	e007      	b.n	80043fe <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	781a      	ldrb	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	3301      	adds	r3, #1
 80043fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004404:	b29b      	uxth	r3, r3
 8004406:	3b01      	subs	r3, #1
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004416:	b29b      	uxth	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1cc      	bne.n	80043b6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	2200      	movs	r2, #0
 8004424:	2140      	movs	r1, #64	; 0x40
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 fe03 	bl	8005032 <UART_WaitOnFlagUntilTimeout>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e005      	b.n	8004442 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2220      	movs	r2, #32
 800443a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	e000      	b.n	8004442 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8004440:	2302      	movs	r3, #2
  }
}
 8004442:	4618      	mov	r0, r3
 8004444:	3720      	adds	r7, #32
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	4613      	mov	r3, r2
 8004458:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445e:	2b20      	cmp	r3, #32
 8004460:	d144      	bne.n	80044ec <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <HAL_UART_Transmit_IT+0x22>
 8004468:	88fb      	ldrh	r3, [r7, #6]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e03d      	b.n	80044ee <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <HAL_UART_Transmit_IT+0x34>
 800447c:	2302      	movs	r3, #2
 800447e:	e036      	b.n	80044ee <HAL_UART_Transmit_IT+0xa2>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	88fa      	ldrh	r2, [r7, #6]
 8004492:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	88fa      	ldrh	r2, [r7, #6]
 800449a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2221      	movs	r2, #33	; 0x21
 80044ae:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b8:	d107      	bne.n	80044ca <HAL_UART_Transmit_IT+0x7e>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d103      	bne.n	80044ca <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4a0d      	ldr	r2, [pc, #52]	; (80044fc <HAL_UART_Transmit_IT+0xb0>)
 80044c6:	665a      	str	r2, [r3, #100]	; 0x64
 80044c8:	e002      	b.n	80044d0 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4a0c      	ldr	r2, [pc, #48]	; (8004500 <HAL_UART_Transmit_IT+0xb4>)
 80044ce:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044e6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	e000      	b.n	80044ee <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 80044ec:	2302      	movs	r3, #2
  }
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	08005207 	.word	0x08005207
 8004500:	08005195 	.word	0x08005195

08004504 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	4613      	mov	r3, r2
 8004510:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004516:	2b20      	cmp	r3, #32
 8004518:	f040 808a 	bne.w	8004630 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <HAL_UART_Receive_IT+0x24>
 8004522:	88fb      	ldrh	r3, [r7, #6]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e082      	b.n	8004632 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_UART_Receive_IT+0x36>
 8004536:	2302      	movs	r3, #2
 8004538:	e07b      	b.n	8004632 <HAL_UART_Receive_IT+0x12e>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	88fa      	ldrh	r2, [r7, #6]
 800454c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	88fa      	ldrh	r2, [r7, #6]
 8004554:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004566:	d10e      	bne.n	8004586 <HAL_UART_Receive_IT+0x82>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d105      	bne.n	800457c <HAL_UART_Receive_IT+0x78>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004576:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800457a:	e02d      	b.n	80045d8 <HAL_UART_Receive_IT+0xd4>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	22ff      	movs	r2, #255	; 0xff
 8004580:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004584:	e028      	b.n	80045d8 <HAL_UART_Receive_IT+0xd4>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10d      	bne.n	80045aa <HAL_UART_Receive_IT+0xa6>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d104      	bne.n	80045a0 <HAL_UART_Receive_IT+0x9c>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	22ff      	movs	r2, #255	; 0xff
 800459a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800459e:	e01b      	b.n	80045d8 <HAL_UART_Receive_IT+0xd4>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	227f      	movs	r2, #127	; 0x7f
 80045a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045a8:	e016      	b.n	80045d8 <HAL_UART_Receive_IT+0xd4>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045b2:	d10d      	bne.n	80045d0 <HAL_UART_Receive_IT+0xcc>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d104      	bne.n	80045c6 <HAL_UART_Receive_IT+0xc2>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	227f      	movs	r2, #127	; 0x7f
 80045c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045c4:	e008      	b.n	80045d8 <HAL_UART_Receive_IT+0xd4>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	223f      	movs	r2, #63	; 0x3f
 80045ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045ce:	e003      	b.n	80045d8 <HAL_UART_Receive_IT+0xd4>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2222      	movs	r2, #34	; 0x22
 80045e2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689a      	ldr	r2, [r3, #8]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0201 	orr.w	r2, r2, #1
 80045f2:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045fc:	d107      	bne.n	800460e <HAL_UART_Receive_IT+0x10a>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d103      	bne.n	800460e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4a0d      	ldr	r2, [pc, #52]	; (8004640 <HAL_UART_Receive_IT+0x13c>)
 800460a:	661a      	str	r2, [r3, #96]	; 0x60
 800460c:	e002      	b.n	8004614 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4a0c      	ldr	r2, [pc, #48]	; (8004644 <HAL_UART_Receive_IT+0x140>)
 8004612:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800462a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800462c:	2300      	movs	r3, #0
 800462e:	e000      	b.n	8004632 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004630:	2302      	movs	r3, #2
  }
}
 8004632:	4618      	mov	r0, r3
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	0800535b 	.word	0x0800535b
 8004644:	080052b5 	.word	0x080052b5

08004648 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b088      	sub	sp, #32
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004668:	69fa      	ldr	r2, [r7, #28]
 800466a:	f640 030f 	movw	r3, #2063	; 0x80f
 800466e:	4013      	ands	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d113      	bne.n	80046a0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f003 0320 	and.w	r3, r3, #32
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00e      	beq.n	80046a0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	f003 0320 	and.w	r3, r3, #32
 8004688:	2b00      	cmp	r3, #0
 800468a:	d009      	beq.n	80046a0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 8114 	beq.w	80048be <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	4798      	blx	r3
      }
      return;
 800469e:	e10e      	b.n	80048be <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 80d6 	beq.w	8004854 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d105      	bne.n	80046be <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 80cb 	beq.w	8004854 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00e      	beq.n	80046e6 <HAL_UART_IRQHandler+0x9e>
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d009      	beq.n	80046e6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2201      	movs	r2, #1
 80046d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046de:	f043 0201 	orr.w	r2, r3, #1
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00e      	beq.n	800470e <HAL_UART_IRQHandler+0xc6>
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d009      	beq.n	800470e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2202      	movs	r2, #2
 8004700:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004706:	f043 0204 	orr.w	r2, r3, #4
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00e      	beq.n	8004736 <HAL_UART_IRQHandler+0xee>
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d009      	beq.n	8004736 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2204      	movs	r2, #4
 8004728:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800472e:	f043 0202 	orr.w	r2, r3, #2
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	f003 0308 	and.w	r3, r3, #8
 800473c:	2b00      	cmp	r3, #0
 800473e:	d013      	beq.n	8004768 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	f003 0320 	and.w	r3, r3, #32
 8004746:	2b00      	cmp	r3, #0
 8004748:	d104      	bne.n	8004754 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004750:	2b00      	cmp	r3, #0
 8004752:	d009      	beq.n	8004768 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2208      	movs	r2, #8
 800475a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004760:	f043 0208 	orr.w	r2, r3, #8
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00f      	beq.n	8004792 <HAL_UART_IRQHandler+0x14a>
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00a      	beq.n	8004792 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004784:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800478a:	f043 0220 	orr.w	r2, r3, #32
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 8093 	beq.w	80048c2 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	f003 0320 	and.w	r3, r3, #32
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00c      	beq.n	80047c0 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d007      	beq.n	80047c0 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047c4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d0:	2b40      	cmp	r3, #64	; 0x40
 80047d2:	d004      	beq.n	80047de <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d031      	beq.n	8004842 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 fca2 	bl	8005128 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ee:	2b40      	cmp	r3, #64	; 0x40
 80047f0:	d123      	bne.n	800483a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004800:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004806:	2b00      	cmp	r3, #0
 8004808:	d013      	beq.n	8004832 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800480e:	4a30      	ldr	r2, [pc, #192]	; (80048d0 <HAL_UART_IRQHandler+0x288>)
 8004810:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004816:	4618      	mov	r0, r3
 8004818:	f7fc fe46 	bl	80014a8 <HAL_DMA_Abort_IT>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d016      	beq.n	8004850 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800482c:	4610      	mov	r0, r2
 800482e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004830:	e00e      	b.n	8004850 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f858 	bl	80048e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004838:	e00a      	b.n	8004850 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f854 	bl	80048e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004840:	e006      	b.n	8004850 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f850 	bl	80048e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800484e:	e038      	b.n	80048c2 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004850:	bf00      	nop
    return;
 8004852:	e036      	b.n	80048c2 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00d      	beq.n	800487a <HAL_UART_IRQHandler+0x232>
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d008      	beq.n	800487a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004870:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f842 	bl	80048fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004878:	e026      	b.n	80048c8 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00d      	beq.n	80048a0 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488a:	2b00      	cmp	r3, #0
 800488c:	d008      	beq.n	80048a0 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004892:	2b00      	cmp	r3, #0
 8004894:	d017      	beq.n	80048c6 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	4798      	blx	r3
    }
    return;
 800489e:	e012      	b.n	80048c6 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00e      	beq.n	80048c8 <HAL_UART_IRQHandler+0x280>
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d009      	beq.n	80048c8 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fce4 	bl	8005282 <UART_EndTransmit_IT>
    return;
 80048ba:	bf00      	nop
 80048bc:	e004      	b.n	80048c8 <HAL_UART_IRQHandler+0x280>
      return;
 80048be:	bf00      	nop
 80048c0:	e002      	b.n	80048c8 <HAL_UART_IRQHandler+0x280>
    return;
 80048c2:	bf00      	nop
 80048c4:	e000      	b.n	80048c8 <HAL_UART_IRQHandler+0x280>
    return;
 80048c6:	bf00      	nop
  }

}
 80048c8:	3720      	adds	r7, #32
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	08005169 	.word	0x08005169

080048d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b088      	sub	sp, #32
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004918:	2300      	movs	r3, #0
 800491a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800491c:	2300      	movs	r3, #0
 800491e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	431a      	orrs	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	4313      	orrs	r3, r2
 8004936:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	4bb1      	ldr	r3, [pc, #708]	; (8004c04 <UART_SetConfig+0x2f4>)
 8004940:	4013      	ands	r3, r2
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6812      	ldr	r2, [r2, #0]
 8004946:	6939      	ldr	r1, [r7, #16]
 8004948:	430b      	orrs	r3, r1
 800494a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	4313      	orrs	r3, r2
 8004970:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	430a      	orrs	r2, r1
 8004984:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a9f      	ldr	r2, [pc, #636]	; (8004c08 <UART_SetConfig+0x2f8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d121      	bne.n	80049d4 <UART_SetConfig+0xc4>
 8004990:	4b9e      	ldr	r3, [pc, #632]	; (8004c0c <UART_SetConfig+0x2fc>)
 8004992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	2b03      	cmp	r3, #3
 800499c:	d816      	bhi.n	80049cc <UART_SetConfig+0xbc>
 800499e:	a201      	add	r2, pc, #4	; (adr r2, 80049a4 <UART_SetConfig+0x94>)
 80049a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a4:	080049b5 	.word	0x080049b5
 80049a8:	080049c1 	.word	0x080049c1
 80049ac:	080049bb 	.word	0x080049bb
 80049b0:	080049c7 	.word	0x080049c7
 80049b4:	2301      	movs	r3, #1
 80049b6:	77fb      	strb	r3, [r7, #31]
 80049b8:	e151      	b.n	8004c5e <UART_SetConfig+0x34e>
 80049ba:	2302      	movs	r3, #2
 80049bc:	77fb      	strb	r3, [r7, #31]
 80049be:	e14e      	b.n	8004c5e <UART_SetConfig+0x34e>
 80049c0:	2304      	movs	r3, #4
 80049c2:	77fb      	strb	r3, [r7, #31]
 80049c4:	e14b      	b.n	8004c5e <UART_SetConfig+0x34e>
 80049c6:	2308      	movs	r3, #8
 80049c8:	77fb      	strb	r3, [r7, #31]
 80049ca:	e148      	b.n	8004c5e <UART_SetConfig+0x34e>
 80049cc:	2310      	movs	r3, #16
 80049ce:	77fb      	strb	r3, [r7, #31]
 80049d0:	bf00      	nop
 80049d2:	e144      	b.n	8004c5e <UART_SetConfig+0x34e>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a8d      	ldr	r2, [pc, #564]	; (8004c10 <UART_SetConfig+0x300>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d134      	bne.n	8004a48 <UART_SetConfig+0x138>
 80049de:	4b8b      	ldr	r3, [pc, #556]	; (8004c0c <UART_SetConfig+0x2fc>)
 80049e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e4:	f003 030c 	and.w	r3, r3, #12
 80049e8:	2b0c      	cmp	r3, #12
 80049ea:	d829      	bhi.n	8004a40 <UART_SetConfig+0x130>
 80049ec:	a201      	add	r2, pc, #4	; (adr r2, 80049f4 <UART_SetConfig+0xe4>)
 80049ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f2:	bf00      	nop
 80049f4:	08004a29 	.word	0x08004a29
 80049f8:	08004a41 	.word	0x08004a41
 80049fc:	08004a41 	.word	0x08004a41
 8004a00:	08004a41 	.word	0x08004a41
 8004a04:	08004a35 	.word	0x08004a35
 8004a08:	08004a41 	.word	0x08004a41
 8004a0c:	08004a41 	.word	0x08004a41
 8004a10:	08004a41 	.word	0x08004a41
 8004a14:	08004a2f 	.word	0x08004a2f
 8004a18:	08004a41 	.word	0x08004a41
 8004a1c:	08004a41 	.word	0x08004a41
 8004a20:	08004a41 	.word	0x08004a41
 8004a24:	08004a3b 	.word	0x08004a3b
 8004a28:	2300      	movs	r3, #0
 8004a2a:	77fb      	strb	r3, [r7, #31]
 8004a2c:	e117      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	77fb      	strb	r3, [r7, #31]
 8004a32:	e114      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004a34:	2304      	movs	r3, #4
 8004a36:	77fb      	strb	r3, [r7, #31]
 8004a38:	e111      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004a3a:	2308      	movs	r3, #8
 8004a3c:	77fb      	strb	r3, [r7, #31]
 8004a3e:	e10e      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004a40:	2310      	movs	r3, #16
 8004a42:	77fb      	strb	r3, [r7, #31]
 8004a44:	bf00      	nop
 8004a46:	e10a      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a71      	ldr	r2, [pc, #452]	; (8004c14 <UART_SetConfig+0x304>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d120      	bne.n	8004a94 <UART_SetConfig+0x184>
 8004a52:	4b6e      	ldr	r3, [pc, #440]	; (8004c0c <UART_SetConfig+0x2fc>)
 8004a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a5c:	2b10      	cmp	r3, #16
 8004a5e:	d00f      	beq.n	8004a80 <UART_SetConfig+0x170>
 8004a60:	2b10      	cmp	r3, #16
 8004a62:	d802      	bhi.n	8004a6a <UART_SetConfig+0x15a>
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d005      	beq.n	8004a74 <UART_SetConfig+0x164>
 8004a68:	e010      	b.n	8004a8c <UART_SetConfig+0x17c>
 8004a6a:	2b20      	cmp	r3, #32
 8004a6c:	d005      	beq.n	8004a7a <UART_SetConfig+0x16a>
 8004a6e:	2b30      	cmp	r3, #48	; 0x30
 8004a70:	d009      	beq.n	8004a86 <UART_SetConfig+0x176>
 8004a72:	e00b      	b.n	8004a8c <UART_SetConfig+0x17c>
 8004a74:	2300      	movs	r3, #0
 8004a76:	77fb      	strb	r3, [r7, #31]
 8004a78:	e0f1      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	77fb      	strb	r3, [r7, #31]
 8004a7e:	e0ee      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004a80:	2304      	movs	r3, #4
 8004a82:	77fb      	strb	r3, [r7, #31]
 8004a84:	e0eb      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004a86:	2308      	movs	r3, #8
 8004a88:	77fb      	strb	r3, [r7, #31]
 8004a8a:	e0e8      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004a8c:	2310      	movs	r3, #16
 8004a8e:	77fb      	strb	r3, [r7, #31]
 8004a90:	bf00      	nop
 8004a92:	e0e4      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a5f      	ldr	r2, [pc, #380]	; (8004c18 <UART_SetConfig+0x308>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d120      	bne.n	8004ae0 <UART_SetConfig+0x1d0>
 8004a9e:	4b5b      	ldr	r3, [pc, #364]	; (8004c0c <UART_SetConfig+0x2fc>)
 8004aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004aa8:	2b40      	cmp	r3, #64	; 0x40
 8004aaa:	d00f      	beq.n	8004acc <UART_SetConfig+0x1bc>
 8004aac:	2b40      	cmp	r3, #64	; 0x40
 8004aae:	d802      	bhi.n	8004ab6 <UART_SetConfig+0x1a6>
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d005      	beq.n	8004ac0 <UART_SetConfig+0x1b0>
 8004ab4:	e010      	b.n	8004ad8 <UART_SetConfig+0x1c8>
 8004ab6:	2b80      	cmp	r3, #128	; 0x80
 8004ab8:	d005      	beq.n	8004ac6 <UART_SetConfig+0x1b6>
 8004aba:	2bc0      	cmp	r3, #192	; 0xc0
 8004abc:	d009      	beq.n	8004ad2 <UART_SetConfig+0x1c2>
 8004abe:	e00b      	b.n	8004ad8 <UART_SetConfig+0x1c8>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	77fb      	strb	r3, [r7, #31]
 8004ac4:	e0cb      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	77fb      	strb	r3, [r7, #31]
 8004aca:	e0c8      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004acc:	2304      	movs	r3, #4
 8004ace:	77fb      	strb	r3, [r7, #31]
 8004ad0:	e0c5      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004ad2:	2308      	movs	r3, #8
 8004ad4:	77fb      	strb	r3, [r7, #31]
 8004ad6:	e0c2      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004ad8:	2310      	movs	r3, #16
 8004ada:	77fb      	strb	r3, [r7, #31]
 8004adc:	bf00      	nop
 8004ade:	e0be      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a4d      	ldr	r2, [pc, #308]	; (8004c1c <UART_SetConfig+0x30c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d124      	bne.n	8004b34 <UART_SetConfig+0x224>
 8004aea:	4b48      	ldr	r3, [pc, #288]	; (8004c0c <UART_SetConfig+0x2fc>)
 8004aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004af8:	d012      	beq.n	8004b20 <UART_SetConfig+0x210>
 8004afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004afe:	d802      	bhi.n	8004b06 <UART_SetConfig+0x1f6>
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d007      	beq.n	8004b14 <UART_SetConfig+0x204>
 8004b04:	e012      	b.n	8004b2c <UART_SetConfig+0x21c>
 8004b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b0a:	d006      	beq.n	8004b1a <UART_SetConfig+0x20a>
 8004b0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b10:	d009      	beq.n	8004b26 <UART_SetConfig+0x216>
 8004b12:	e00b      	b.n	8004b2c <UART_SetConfig+0x21c>
 8004b14:	2300      	movs	r3, #0
 8004b16:	77fb      	strb	r3, [r7, #31]
 8004b18:	e0a1      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	77fb      	strb	r3, [r7, #31]
 8004b1e:	e09e      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004b20:	2304      	movs	r3, #4
 8004b22:	77fb      	strb	r3, [r7, #31]
 8004b24:	e09b      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004b26:	2308      	movs	r3, #8
 8004b28:	77fb      	strb	r3, [r7, #31]
 8004b2a:	e098      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004b2c:	2310      	movs	r3, #16
 8004b2e:	77fb      	strb	r3, [r7, #31]
 8004b30:	bf00      	nop
 8004b32:	e094      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a39      	ldr	r2, [pc, #228]	; (8004c20 <UART_SetConfig+0x310>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d124      	bne.n	8004b88 <UART_SetConfig+0x278>
 8004b3e:	4b33      	ldr	r3, [pc, #204]	; (8004c0c <UART_SetConfig+0x2fc>)
 8004b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b4c:	d012      	beq.n	8004b74 <UART_SetConfig+0x264>
 8004b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b52:	d802      	bhi.n	8004b5a <UART_SetConfig+0x24a>
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d007      	beq.n	8004b68 <UART_SetConfig+0x258>
 8004b58:	e012      	b.n	8004b80 <UART_SetConfig+0x270>
 8004b5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b5e:	d006      	beq.n	8004b6e <UART_SetConfig+0x25e>
 8004b60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b64:	d009      	beq.n	8004b7a <UART_SetConfig+0x26a>
 8004b66:	e00b      	b.n	8004b80 <UART_SetConfig+0x270>
 8004b68:	2301      	movs	r3, #1
 8004b6a:	77fb      	strb	r3, [r7, #31]
 8004b6c:	e077      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004b6e:	2302      	movs	r3, #2
 8004b70:	77fb      	strb	r3, [r7, #31]
 8004b72:	e074      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004b74:	2304      	movs	r3, #4
 8004b76:	77fb      	strb	r3, [r7, #31]
 8004b78:	e071      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004b7a:	2308      	movs	r3, #8
 8004b7c:	77fb      	strb	r3, [r7, #31]
 8004b7e:	e06e      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004b80:	2310      	movs	r3, #16
 8004b82:	77fb      	strb	r3, [r7, #31]
 8004b84:	bf00      	nop
 8004b86:	e06a      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a25      	ldr	r2, [pc, #148]	; (8004c24 <UART_SetConfig+0x314>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d124      	bne.n	8004bdc <UART_SetConfig+0x2cc>
 8004b92:	4b1e      	ldr	r3, [pc, #120]	; (8004c0c <UART_SetConfig+0x2fc>)
 8004b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b98:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba0:	d012      	beq.n	8004bc8 <UART_SetConfig+0x2b8>
 8004ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba6:	d802      	bhi.n	8004bae <UART_SetConfig+0x29e>
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d007      	beq.n	8004bbc <UART_SetConfig+0x2ac>
 8004bac:	e012      	b.n	8004bd4 <UART_SetConfig+0x2c4>
 8004bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb2:	d006      	beq.n	8004bc2 <UART_SetConfig+0x2b2>
 8004bb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bb8:	d009      	beq.n	8004bce <UART_SetConfig+0x2be>
 8004bba:	e00b      	b.n	8004bd4 <UART_SetConfig+0x2c4>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	77fb      	strb	r3, [r7, #31]
 8004bc0:	e04d      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	77fb      	strb	r3, [r7, #31]
 8004bc6:	e04a      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004bc8:	2304      	movs	r3, #4
 8004bca:	77fb      	strb	r3, [r7, #31]
 8004bcc:	e047      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004bce:	2308      	movs	r3, #8
 8004bd0:	77fb      	strb	r3, [r7, #31]
 8004bd2:	e044      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004bd4:	2310      	movs	r3, #16
 8004bd6:	77fb      	strb	r3, [r7, #31]
 8004bd8:	bf00      	nop
 8004bda:	e040      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a11      	ldr	r2, [pc, #68]	; (8004c28 <UART_SetConfig+0x318>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d139      	bne.n	8004c5a <UART_SetConfig+0x34a>
 8004be6:	4b09      	ldr	r3, [pc, #36]	; (8004c0c <UART_SetConfig+0x2fc>)
 8004be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004bf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bf4:	d027      	beq.n	8004c46 <UART_SetConfig+0x336>
 8004bf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bfa:	d817      	bhi.n	8004c2c <UART_SetConfig+0x31c>
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d01c      	beq.n	8004c3a <UART_SetConfig+0x32a>
 8004c00:	e027      	b.n	8004c52 <UART_SetConfig+0x342>
 8004c02:	bf00      	nop
 8004c04:	efff69f3 	.word	0xefff69f3
 8004c08:	40011000 	.word	0x40011000
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	40004400 	.word	0x40004400
 8004c14:	40004800 	.word	0x40004800
 8004c18:	40004c00 	.word	0x40004c00
 8004c1c:	40005000 	.word	0x40005000
 8004c20:	40011400 	.word	0x40011400
 8004c24:	40007800 	.word	0x40007800
 8004c28:	40007c00 	.word	0x40007c00
 8004c2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c30:	d006      	beq.n	8004c40 <UART_SetConfig+0x330>
 8004c32:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c36:	d009      	beq.n	8004c4c <UART_SetConfig+0x33c>
 8004c38:	e00b      	b.n	8004c52 <UART_SetConfig+0x342>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	77fb      	strb	r3, [r7, #31]
 8004c3e:	e00e      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004c40:	2302      	movs	r3, #2
 8004c42:	77fb      	strb	r3, [r7, #31]
 8004c44:	e00b      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004c46:	2304      	movs	r3, #4
 8004c48:	77fb      	strb	r3, [r7, #31]
 8004c4a:	e008      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004c4c:	2308      	movs	r3, #8
 8004c4e:	77fb      	strb	r3, [r7, #31]
 8004c50:	e005      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004c52:	2310      	movs	r3, #16
 8004c54:	77fb      	strb	r3, [r7, #31]
 8004c56:	bf00      	nop
 8004c58:	e001      	b.n	8004c5e <UART_SetConfig+0x34e>
 8004c5a:	2310      	movs	r3, #16
 8004c5c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c66:	d17f      	bne.n	8004d68 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004c68:	7ffb      	ldrb	r3, [r7, #31]
 8004c6a:	2b08      	cmp	r3, #8
 8004c6c:	d85c      	bhi.n	8004d28 <UART_SetConfig+0x418>
 8004c6e:	a201      	add	r2, pc, #4	; (adr r2, 8004c74 <UART_SetConfig+0x364>)
 8004c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c74:	08004c99 	.word	0x08004c99
 8004c78:	08004cb9 	.word	0x08004cb9
 8004c7c:	08004cd9 	.word	0x08004cd9
 8004c80:	08004d29 	.word	0x08004d29
 8004c84:	08004cf1 	.word	0x08004cf1
 8004c88:	08004d29 	.word	0x08004d29
 8004c8c:	08004d29 	.word	0x08004d29
 8004c90:	08004d29 	.word	0x08004d29
 8004c94:	08004d11 	.word	0x08004d11
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c98:	f7fe fc1c 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 8004c9c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	005a      	lsls	r2, r3, #1
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	085b      	lsrs	r3, r3, #1
 8004ca8:	441a      	add	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	61bb      	str	r3, [r7, #24]
        break;
 8004cb6:	e03a      	b.n	8004d2e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cb8:	f7fe fc20 	bl	80034fc <HAL_RCC_GetPCLK2Freq>
 8004cbc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	005a      	lsls	r2, r3, #1
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	085b      	lsrs	r3, r3, #1
 8004cc8:	441a      	add	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	61bb      	str	r3, [r7, #24]
        break;
 8004cd6:	e02a      	b.n	8004d2e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	085a      	lsrs	r2, r3, #1
 8004cde:	4b5f      	ldr	r3, [pc, #380]	; (8004e5c <UART_SetConfig+0x54c>)
 8004ce0:	4413      	add	r3, r2
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6852      	ldr	r2, [r2, #4]
 8004ce6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	61bb      	str	r3, [r7, #24]
        break;
 8004cee:	e01e      	b.n	8004d2e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cf0:	f7fe fb32 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 8004cf4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	005a      	lsls	r2, r3, #1
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	085b      	lsrs	r3, r3, #1
 8004d00:	441a      	add	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	61bb      	str	r3, [r7, #24]
        break;
 8004d0e:	e00e      	b.n	8004d2e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	085b      	lsrs	r3, r3, #1
 8004d16:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	61bb      	str	r3, [r7, #24]
        break;
 8004d26:	e002      	b.n	8004d2e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	75fb      	strb	r3, [r7, #23]
        break;
 8004d2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	2b0f      	cmp	r3, #15
 8004d32:	d916      	bls.n	8004d62 <UART_SetConfig+0x452>
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d3a:	d212      	bcs.n	8004d62 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	f023 030f 	bic.w	r3, r3, #15
 8004d44:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	085b      	lsrs	r3, r3, #1
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	897b      	ldrh	r3, [r7, #10]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	897a      	ldrh	r2, [r7, #10]
 8004d5e:	60da      	str	r2, [r3, #12]
 8004d60:	e070      	b.n	8004e44 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	75fb      	strb	r3, [r7, #23]
 8004d66:	e06d      	b.n	8004e44 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8004d68:	7ffb      	ldrb	r3, [r7, #31]
 8004d6a:	2b08      	cmp	r3, #8
 8004d6c:	d859      	bhi.n	8004e22 <UART_SetConfig+0x512>
 8004d6e:	a201      	add	r2, pc, #4	; (adr r2, 8004d74 <UART_SetConfig+0x464>)
 8004d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d74:	08004d99 	.word	0x08004d99
 8004d78:	08004db7 	.word	0x08004db7
 8004d7c:	08004dd5 	.word	0x08004dd5
 8004d80:	08004e23 	.word	0x08004e23
 8004d84:	08004ded 	.word	0x08004ded
 8004d88:	08004e23 	.word	0x08004e23
 8004d8c:	08004e23 	.word	0x08004e23
 8004d90:	08004e23 	.word	0x08004e23
 8004d94:	08004e0b 	.word	0x08004e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d98:	f7fe fb9c 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 8004d9c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	085a      	lsrs	r2, r3, #1
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	441a      	add	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	61bb      	str	r3, [r7, #24]
        break;
 8004db4:	e038      	b.n	8004e28 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004db6:	f7fe fba1 	bl	80034fc <HAL_RCC_GetPCLK2Freq>
 8004dba:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	085a      	lsrs	r2, r3, #1
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	441a      	add	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	61bb      	str	r3, [r7, #24]
        break;
 8004dd2:	e029      	b.n	8004e28 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	085a      	lsrs	r2, r3, #1
 8004dda:	4b21      	ldr	r3, [pc, #132]	; (8004e60 <UART_SetConfig+0x550>)
 8004ddc:	4413      	add	r3, r2
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	6852      	ldr	r2, [r2, #4]
 8004de2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	61bb      	str	r3, [r7, #24]
        break;
 8004dea:	e01d      	b.n	8004e28 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dec:	f7fe fab4 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 8004df0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	085a      	lsrs	r2, r3, #1
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	441a      	add	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	61bb      	str	r3, [r7, #24]
        break;
 8004e08:	e00e      	b.n	8004e28 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	085b      	lsrs	r3, r3, #1
 8004e10:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	61bb      	str	r3, [r7, #24]
        break;
 8004e20:	e002      	b.n	8004e28 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	75fb      	strb	r3, [r7, #23]
        break;
 8004e26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	2b0f      	cmp	r3, #15
 8004e2c:	d908      	bls.n	8004e40 <UART_SetConfig+0x530>
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e34:	d204      	bcs.n	8004e40 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	60da      	str	r2, [r3, #12]
 8004e3e:	e001      	b.n	8004e44 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3720      	adds	r7, #32
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	01e84800 	.word	0x01e84800
 8004e60:	00f42400 	.word	0x00f42400

08004e64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00a      	beq.n	8004e8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00a      	beq.n	8004eb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00a      	beq.n	8004ed2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	f003 0308 	and.w	r3, r3, #8
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00a      	beq.n	8004ef4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	f003 0310 	and.w	r3, r3, #16
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00a      	beq.n	8004f16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	f003 0320 	and.w	r3, r3, #32
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00a      	beq.n	8004f38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d01a      	beq.n	8004f7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f62:	d10a      	bne.n	8004f7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	605a      	str	r2, [r3, #4]
  }
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af02      	add	r7, sp, #8
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004fb6:	f7fc f85f 	bl	8001078 <HAL_GetTick>
 8004fba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0308 	and.w	r3, r3, #8
 8004fc6:	2b08      	cmp	r3, #8
 8004fc8:	d10e      	bne.n	8004fe8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 f82a 	bl	8005032 <UART_WaitOnFlagUntilTimeout>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e020      	b.n	800502a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0304 	and.w	r3, r3, #4
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d10e      	bne.n	8005014 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ff6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f814 	bl	8005032 <UART_WaitOnFlagUntilTimeout>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e00a      	b.n	800502a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2220      	movs	r2, #32
 8005018:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2220      	movs	r2, #32
 800501e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b084      	sub	sp, #16
 8005036:	af00      	add	r7, sp, #0
 8005038:	60f8      	str	r0, [r7, #12]
 800503a:	60b9      	str	r1, [r7, #8]
 800503c:	603b      	str	r3, [r7, #0]
 800503e:	4613      	mov	r3, r2
 8005040:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005042:	e05d      	b.n	8005100 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504a:	d059      	beq.n	8005100 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800504c:	f7fc f814 	bl	8001078 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	429a      	cmp	r2, r3
 800505a:	d302      	bcc.n	8005062 <UART_WaitOnFlagUntilTimeout+0x30>
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d11b      	bne.n	800509a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005070:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 0201 	bic.w	r2, r2, #1
 8005080:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2220      	movs	r2, #32
 8005086:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2220      	movs	r2, #32
 800508c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e042      	b.n	8005120 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d02b      	beq.n	8005100 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b6:	d123      	bne.n	8005100 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050c0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050d0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0201 	bic.w	r2, r2, #1
 80050e0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2220      	movs	r2, #32
 80050e6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2220      	movs	r2, #32
 80050ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2220      	movs	r2, #32
 80050f2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e00f      	b.n	8005120 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	69da      	ldr	r2, [r3, #28]
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	4013      	ands	r3, r2
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	429a      	cmp	r2, r3
 800510e:	bf0c      	ite	eq
 8005110:	2301      	moveq	r3, #1
 8005112:	2300      	movne	r3, #0
 8005114:	b2db      	uxtb	r3, r3
 8005116:	461a      	mov	r2, r3
 8005118:	79fb      	ldrb	r3, [r7, #7]
 800511a:	429a      	cmp	r2, r3
 800511c:	d092      	beq.n	8005044 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800513e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0201 	bic.w	r2, r2, #1
 800514e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2220      	movs	r2, #32
 8005154:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005174:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f7ff fbae 	bl	80048e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800518c:	bf00      	nop
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051a0:	2b21      	cmp	r3, #33	; 0x21
 80051a2:	d12a      	bne.n	80051fa <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d110      	bne.n	80051d2 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051be:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051ce:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80051d0:	e013      	b.n	80051fa <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d6:	781a      	ldrb	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005206:	b480      	push	{r7}
 8005208:	b085      	sub	sp, #20
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005212:	2b21      	cmp	r3, #33	; 0x21
 8005214:	d12f      	bne.n	8005276 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800521c:	b29b      	uxth	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d110      	bne.n	8005244 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005230:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005240:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005242:	e018      	b.n	8005276 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005248:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	461a      	mov	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005258:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800525e:	1c9a      	adds	r2, r3, #2
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005276:	bf00      	nop
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b082      	sub	sp, #8
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005298:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2220      	movs	r2, #32
 800529e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7ff fb14 	bl	80048d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052ac:	bf00      	nop
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052c2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052c8:	2b22      	cmp	r3, #34	; 0x22
 80052ca:	d13a      	bne.n	8005342 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80052d4:	89bb      	ldrh	r3, [r7, #12]
 80052d6:	b2d9      	uxtb	r1, r3
 80052d8:	89fb      	ldrh	r3, [r7, #14]
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e0:	400a      	ands	r2, r1
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005308:	b29b      	uxth	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d121      	bne.n	8005352 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800531c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0201 	bic.w	r2, r2, #1
 800532c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2220      	movs	r2, #32
 8005332:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7fb fe1c 	bl	8000f78 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005340:	e007      	b.n	8005352 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	699a      	ldr	r2, [r3, #24]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f042 0208 	orr.w	r2, r2, #8
 8005350:	619a      	str	r2, [r3, #24]
}
 8005352:	bf00      	nop
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b084      	sub	sp, #16
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005368:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800536e:	2b22      	cmp	r3, #34	; 0x22
 8005370:	d13a      	bne.n	80053e8 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005380:	89ba      	ldrh	r2, [r7, #12]
 8005382:	89fb      	ldrh	r3, [r7, #14]
 8005384:	4013      	ands	r3, r2
 8005386:	b29a      	uxth	r2, r3
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005390:	1c9a      	adds	r2, r3, #2
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800539c:	b29b      	uxth	r3, r3
 800539e:	3b01      	subs	r3, #1
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d121      	bne.n	80053f8 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80053c2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689a      	ldr	r2, [r3, #8]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0201 	bic.w	r2, r2, #1
 80053d2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2220      	movs	r2, #32
 80053d8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7fb fdc9 	bl	8000f78 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053e6:	e007      	b.n	80053f8 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699a      	ldr	r2, [r3, #24]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0208 	orr.w	r2, r2, #8
 80053f6:	619a      	str	r2, [r3, #24]
}
 80053f8:	bf00      	nop
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	4613      	mov	r3, r2
 800540c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800540e:	79fb      	ldrb	r3, [r7, #7]
 8005410:	2b02      	cmp	r3, #2
 8005412:	d165      	bne.n	80054e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	4a41      	ldr	r2, [pc, #260]	; (800551c <USB_SetTurnaroundTime+0x11c>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d906      	bls.n	800542a <USB_SetTurnaroundTime+0x2a>
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	4a40      	ldr	r2, [pc, #256]	; (8005520 <USB_SetTurnaroundTime+0x120>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d802      	bhi.n	800542a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005424:	230f      	movs	r3, #15
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	e062      	b.n	80054f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	4a3c      	ldr	r2, [pc, #240]	; (8005520 <USB_SetTurnaroundTime+0x120>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d906      	bls.n	8005440 <USB_SetTurnaroundTime+0x40>
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	4a3b      	ldr	r2, [pc, #236]	; (8005524 <USB_SetTurnaroundTime+0x124>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d802      	bhi.n	8005440 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800543a:	230e      	movs	r3, #14
 800543c:	617b      	str	r3, [r7, #20]
 800543e:	e057      	b.n	80054f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4a38      	ldr	r2, [pc, #224]	; (8005524 <USB_SetTurnaroundTime+0x124>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d906      	bls.n	8005456 <USB_SetTurnaroundTime+0x56>
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	4a37      	ldr	r2, [pc, #220]	; (8005528 <USB_SetTurnaroundTime+0x128>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d802      	bhi.n	8005456 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005450:	230d      	movs	r3, #13
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	e04c      	b.n	80054f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	4a33      	ldr	r2, [pc, #204]	; (8005528 <USB_SetTurnaroundTime+0x128>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d906      	bls.n	800546c <USB_SetTurnaroundTime+0x6c>
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4a32      	ldr	r2, [pc, #200]	; (800552c <USB_SetTurnaroundTime+0x12c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d802      	bhi.n	800546c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005466:	230c      	movs	r3, #12
 8005468:	617b      	str	r3, [r7, #20]
 800546a:	e041      	b.n	80054f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	4a2f      	ldr	r2, [pc, #188]	; (800552c <USB_SetTurnaroundTime+0x12c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d906      	bls.n	8005482 <USB_SetTurnaroundTime+0x82>
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	4a2e      	ldr	r2, [pc, #184]	; (8005530 <USB_SetTurnaroundTime+0x130>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d802      	bhi.n	8005482 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800547c:	230b      	movs	r3, #11
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	e036      	b.n	80054f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	4a2a      	ldr	r2, [pc, #168]	; (8005530 <USB_SetTurnaroundTime+0x130>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d906      	bls.n	8005498 <USB_SetTurnaroundTime+0x98>
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	4a29      	ldr	r2, [pc, #164]	; (8005534 <USB_SetTurnaroundTime+0x134>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d802      	bhi.n	8005498 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005492:	230a      	movs	r3, #10
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	e02b      	b.n	80054f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4a26      	ldr	r2, [pc, #152]	; (8005534 <USB_SetTurnaroundTime+0x134>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d906      	bls.n	80054ae <USB_SetTurnaroundTime+0xae>
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4a25      	ldr	r2, [pc, #148]	; (8005538 <USB_SetTurnaroundTime+0x138>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d802      	bhi.n	80054ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80054a8:	2309      	movs	r3, #9
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	e020      	b.n	80054f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	4a21      	ldr	r2, [pc, #132]	; (8005538 <USB_SetTurnaroundTime+0x138>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d906      	bls.n	80054c4 <USB_SetTurnaroundTime+0xc4>
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	4a20      	ldr	r2, [pc, #128]	; (800553c <USB_SetTurnaroundTime+0x13c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d802      	bhi.n	80054c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80054be:	2308      	movs	r3, #8
 80054c0:	617b      	str	r3, [r7, #20]
 80054c2:	e015      	b.n	80054f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4a1d      	ldr	r2, [pc, #116]	; (800553c <USB_SetTurnaroundTime+0x13c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d906      	bls.n	80054da <USB_SetTurnaroundTime+0xda>
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	4a1c      	ldr	r2, [pc, #112]	; (8005540 <USB_SetTurnaroundTime+0x140>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d802      	bhi.n	80054da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80054d4:	2307      	movs	r3, #7
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	e00a      	b.n	80054f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80054da:	2306      	movs	r3, #6
 80054dc:	617b      	str	r3, [r7, #20]
 80054de:	e007      	b.n	80054f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80054e0:	79fb      	ldrb	r3, [r7, #7]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d102      	bne.n	80054ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80054e6:	2309      	movs	r3, #9
 80054e8:	617b      	str	r3, [r7, #20]
 80054ea:	e001      	b.n	80054f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80054ec:	2309      	movs	r3, #9
 80054ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	68da      	ldr	r2, [r3, #12]
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	029b      	lsls	r3, r3, #10
 8005504:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005508:	431a      	orrs	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	371c      	adds	r7, #28
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	00d8acbf 	.word	0x00d8acbf
 8005520:	00e4e1bf 	.word	0x00e4e1bf
 8005524:	00f423ff 	.word	0x00f423ff
 8005528:	0106737f 	.word	0x0106737f
 800552c:	011a499f 	.word	0x011a499f
 8005530:	01312cff 	.word	0x01312cff
 8005534:	014ca43f 	.word	0x014ca43f
 8005538:	016e35ff 	.word	0x016e35ff
 800553c:	01a6ab1f 	.word	0x01a6ab1f
 8005540:	01e847ff 	.word	0x01e847ff

08005544 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800554e:	2300      	movs	r3, #0
 8005550:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	019b      	lsls	r3, r3, #6
 8005556:	f043 0220 	orr.w	r2, r3, #32
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	3301      	adds	r3, #1
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4a09      	ldr	r2, [pc, #36]	; (800558c <USB_FlushTxFifo+0x48>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d901      	bls.n	8005570 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e006      	b.n	800557e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	f003 0320 	and.w	r3, r3, #32
 8005578:	2b20      	cmp	r3, #32
 800557a:	d0f0      	beq.n	800555e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	00030d40 	.word	0x00030d40

08005590 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f003 0306 	and.w	r3, r3, #6
 80055a8:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d102      	bne.n	80055b6 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80055b0:	2300      	movs	r3, #0
 80055b2:	75fb      	strb	r3, [r7, #23]
 80055b4:	e00a      	b.n	80055cc <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d002      	beq.n	80055c2 <USB_GetDevSpeed+0x32>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2b06      	cmp	r3, #6
 80055c0:	d102      	bne.n	80055c8 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80055c2:	2302      	movs	r3, #2
 80055c4:	75fb      	strb	r3, [r7, #23]
 80055c6:	e001      	b.n	80055cc <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80055c8:	230f      	movs	r3, #15
 80055ca:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80055cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80055da:	b480      	push	{r7}
 80055dc:	b089      	sub	sp, #36	; 0x24
 80055de:	af00      	add	r7, sp, #0
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	4611      	mov	r1, r2
 80055e6:	461a      	mov	r2, r3
 80055e8:	460b      	mov	r3, r1
 80055ea:	71fb      	strb	r3, [r7, #7]
 80055ec:	4613      	mov	r3, r2
 80055ee:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80055f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d11a      	bne.n	8005636 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005600:	88bb      	ldrh	r3, [r7, #4]
 8005602:	3303      	adds	r3, #3
 8005604:	089b      	lsrs	r3, r3, #2
 8005606:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005608:	2300      	movs	r3, #0
 800560a:	61bb      	str	r3, [r7, #24]
 800560c:	e00f      	b.n	800562e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800560e:	79fb      	ldrb	r3, [r7, #7]
 8005610:	031a      	lsls	r2, r3, #12
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	4413      	add	r3, r2
 8005616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800561a:	461a      	mov	r2, r3
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	3304      	adds	r3, #4
 8005626:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	3301      	adds	r3, #1
 800562c:	61bb      	str	r3, [r7, #24]
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	429a      	cmp	r2, r3
 8005634:	d3eb      	bcc.n	800560e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3724      	adds	r7, #36	; 0x24
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005644:	b480      	push	{r7}
 8005646:	b089      	sub	sp, #36	; 0x24
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	4613      	mov	r3, r2
 8005650:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800565a:	88fb      	ldrh	r3, [r7, #6]
 800565c:	3303      	adds	r3, #3
 800565e:	089b      	lsrs	r3, r3, #2
 8005660:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005662:	2300      	movs	r3, #0
 8005664:	61bb      	str	r3, [r7, #24]
 8005666:	e00b      	b.n	8005680 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	601a      	str	r2, [r3, #0]
    pDest++;
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	3304      	adds	r3, #4
 8005678:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	3301      	adds	r3, #1
 800567e:	61bb      	str	r3, [r7, #24]
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	429a      	cmp	r2, r3
 8005686:	d3ef      	bcc.n	8005668 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005688:	69fb      	ldr	r3, [r7, #28]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3724      	adds	r7, #36	; 0x24
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005696:	b480      	push	{r7}
 8005698:	b085      	sub	sp, #20
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4013      	ands	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80056ae:	68fb      	ldr	r3, [r7, #12]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	4013      	ands	r3, r2
 80056de:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	0c1b      	lsrs	r3, r3, #16
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	4013      	ands	r3, r2
 8005712:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	b29b      	uxth	r3, r3
}
 8005718:	4618      	mov	r0, r3
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	460b      	mov	r3, r1
 800572e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005734:	78fb      	ldrb	r3, [r7, #3]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	4013      	ands	r3, r2
 8005750:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005752:	68bb      	ldr	r3, [r7, #8]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	460b      	mov	r3, r1
 800576a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005782:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005784:	78fb      	ldrb	r3, [r7, #3]
 8005786:	f003 030f 	and.w	r3, r3, #15
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	fa22 f303 	lsr.w	r3, r2, r3
 8005790:	01db      	lsls	r3, r3, #7
 8005792:	b2db      	uxtb	r3, r3
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	4313      	orrs	r3, r2
 8005798:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800579a:	78fb      	ldrb	r3, [r7, #3]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	4013      	ands	r3, r2
 80057ac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057ae:	68bb      	ldr	r3, [r7, #8]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	371c      	adds	r7, #28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	f003 0301 	and.w	r3, r3, #1
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f2:	4619      	mov	r1, r3
 80057f4:	4b09      	ldr	r3, [pc, #36]	; (800581c <USB_ActivateSetup+0x44>)
 80057f6:	4013      	ands	r3, r2
 80057f8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800580c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	fffff800 	.word	0xfffff800

08005820 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	460b      	mov	r3, r1
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	333c      	adds	r3, #60	; 0x3c
 8005836:	3304      	adds	r3, #4
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	4a26      	ldr	r2, [pc, #152]	; (80058d8 <USB_EP0_OutStart+0xb8>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d90a      	bls.n	800585a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005850:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005854:	d101      	bne.n	800585a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	e037      	b.n	80058ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005860:	461a      	mov	r2, r3
 8005862:	2300      	movs	r3, #0
 8005864:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005874:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005878:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005888:	f043 0318 	orr.w	r3, r3, #24
 800588c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800589c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80058a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80058a2:	7afb      	ldrb	r3, [r7, #11]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d10f      	bne.n	80058c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ae:	461a      	mov	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058c2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80058c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	371c      	adds	r7, #28
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	4f54300a 	.word	0x4f54300a

080058dc <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	1c5a      	adds	r2, r3, #1
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	601a      	str	r2, [r3, #0]
}
 8005918:	bf00      	nop
 800591a:	3714      	adds	r7, #20
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	6892      	ldr	r2, [r2, #8]
 800593a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6852      	ldr	r2, [r2, #4]
 8005944:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	429a      	cmp	r2, r3
 800594e:	d103      	bne.n	8005958 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	1e5a      	subs	r2, r3, #1
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800597e:	2300      	movs	r3, #0
 8005980:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005982:	4b4f      	ldr	r3, [pc, #316]	; (8005ac0 <xTaskIncrementTick+0x148>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	f040 8089 	bne.w	8005a9e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800598c:	4b4d      	ldr	r3, [pc, #308]	; (8005ac4 <xTaskIncrementTick+0x14c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3301      	adds	r3, #1
 8005992:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005994:	4a4b      	ldr	r2, [pc, #300]	; (8005ac4 <xTaskIncrementTick+0x14c>)
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d121      	bne.n	80059e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80059a0:	4b49      	ldr	r3, [pc, #292]	; (8005ac8 <xTaskIncrementTick+0x150>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00b      	beq.n	80059c2 <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ae:	b672      	cpsid	i
 80059b0:	f383 8811 	msr	BASEPRI, r3
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	b662      	cpsie	i
 80059be:	603b      	str	r3, [r7, #0]
 80059c0:	e7fe      	b.n	80059c0 <xTaskIncrementTick+0x48>
 80059c2:	4b41      	ldr	r3, [pc, #260]	; (8005ac8 <xTaskIncrementTick+0x150>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	4b40      	ldr	r3, [pc, #256]	; (8005acc <xTaskIncrementTick+0x154>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a3e      	ldr	r2, [pc, #248]	; (8005ac8 <xTaskIncrementTick+0x150>)
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	4a3e      	ldr	r2, [pc, #248]	; (8005acc <xTaskIncrementTick+0x154>)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6013      	str	r3, [r2, #0]
 80059d6:	4b3e      	ldr	r3, [pc, #248]	; (8005ad0 <xTaskIncrementTick+0x158>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	3301      	adds	r3, #1
 80059dc:	4a3c      	ldr	r2, [pc, #240]	; (8005ad0 <xTaskIncrementTick+0x158>)
 80059de:	6013      	str	r3, [r2, #0]
 80059e0:	f000 f906 	bl	8005bf0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059e4:	4b3b      	ldr	r3, [pc, #236]	; (8005ad4 <xTaskIncrementTick+0x15c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d348      	bcc.n	8005a80 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059ee:	4b36      	ldr	r3, [pc, #216]	; (8005ac8 <xTaskIncrementTick+0x150>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d104      	bne.n	8005a02 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059f8:	4b36      	ldr	r3, [pc, #216]	; (8005ad4 <xTaskIncrementTick+0x15c>)
 80059fa:	f04f 32ff 	mov.w	r2, #4294967295
 80059fe:	601a      	str	r2, [r3, #0]
					break;
 8005a00:	e03e      	b.n	8005a80 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a02:	4b31      	ldr	r3, [pc, #196]	; (8005ac8 <xTaskIncrementTick+0x150>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d203      	bcs.n	8005a22 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a1a:	4a2e      	ldr	r2, [pc, #184]	; (8005ad4 <xTaskIncrementTick+0x15c>)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a20:	e02e      	b.n	8005a80 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	3304      	adds	r3, #4
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7ff ff7c 	bl	8005924 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d004      	beq.n	8005a3e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	3318      	adds	r3, #24
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff ff73 	bl	8005924 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a42:	2201      	movs	r2, #1
 8005a44:	409a      	lsls	r2, r3
 8005a46:	4b24      	ldr	r3, [pc, #144]	; (8005ad8 <xTaskIncrementTick+0x160>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	4a22      	ldr	r2, [pc, #136]	; (8005ad8 <xTaskIncrementTick+0x160>)
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a54:	4613      	mov	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4a1f      	ldr	r2, [pc, #124]	; (8005adc <xTaskIncrementTick+0x164>)
 8005a5e:	441a      	add	r2, r3
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	3304      	adds	r3, #4
 8005a64:	4619      	mov	r1, r3
 8005a66:	4610      	mov	r0, r2
 8005a68:	f7ff ff38 	bl	80058dc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a70:	4b1b      	ldr	r3, [pc, #108]	; (8005ae0 <xTaskIncrementTick+0x168>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d3b9      	bcc.n	80059ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a7e:	e7b6      	b.n	80059ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a80:	4b17      	ldr	r3, [pc, #92]	; (8005ae0 <xTaskIncrementTick+0x168>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a86:	4915      	ldr	r1, [pc, #84]	; (8005adc <xTaskIncrementTick+0x164>)
 8005a88:	4613      	mov	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	440b      	add	r3, r1
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d907      	bls.n	8005aa8 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	e004      	b.n	8005aa8 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005a9e:	4b11      	ldr	r3, [pc, #68]	; (8005ae4 <xTaskIncrementTick+0x16c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	4a0f      	ldr	r2, [pc, #60]	; (8005ae4 <xTaskIncrementTick+0x16c>)
 8005aa6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005aa8:	4b0f      	ldr	r3, [pc, #60]	; (8005ae8 <xTaskIncrementTick+0x170>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d001      	beq.n	8005ab4 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005ab4:	697b      	ldr	r3, [r7, #20]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3718      	adds	r7, #24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	200000d8 	.word	0x200000d8
 8005ac4:	200000c0 	.word	0x200000c0
 8005ac8:	200000b8 	.word	0x200000b8
 8005acc:	200000bc 	.word	0x200000bc
 8005ad0:	200000d0 	.word	0x200000d0
 8005ad4:	200000d4 	.word	0x200000d4
 8005ad8:	200000c4 	.word	0x200000c4
 8005adc:	2000002c 	.word	0x2000002c
 8005ae0:	20000028 	.word	0x20000028
 8005ae4:	200000c8 	.word	0x200000c8
 8005ae8:	200000cc 	.word	0x200000cc

08005aec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b088      	sub	sp, #32
 8005af0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005af2:	4b3a      	ldr	r3, [pc, #232]	; (8005bdc <vTaskSwitchContext+0xf0>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005afa:	4b39      	ldr	r3, [pc, #228]	; (8005be0 <vTaskSwitchContext+0xf4>)
 8005afc:	2201      	movs	r2, #1
 8005afe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b00:	e067      	b.n	8005bd2 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 8005b02:	4b37      	ldr	r3, [pc, #220]	; (8005be0 <vTaskSwitchContext+0xf4>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8005b08:	4b36      	ldr	r3, [pc, #216]	; (8005be4 <vTaskSwitchContext+0xf8>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0e:	61fb      	str	r3, [r7, #28]
 8005b10:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8005b14:	61bb      	str	r3, [r7, #24]
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d111      	bne.n	8005b44 <vTaskSwitchContext+0x58>
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	3304      	adds	r3, #4
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d10b      	bne.n	8005b44 <vTaskSwitchContext+0x58>
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	3308      	adds	r3, #8
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d105      	bne.n	8005b44 <vTaskSwitchContext+0x58>
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	330c      	adds	r3, #12
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d008      	beq.n	8005b56 <vTaskSwitchContext+0x6a>
 8005b44:	4b27      	ldr	r3, [pc, #156]	; (8005be4 <vTaskSwitchContext+0xf8>)
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	4b26      	ldr	r3, [pc, #152]	; (8005be4 <vTaskSwitchContext+0xf8>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3334      	adds	r3, #52	; 0x34
 8005b4e:	4619      	mov	r1, r3
 8005b50:	4610      	mov	r0, r2
 8005b52:	f7fa fcfd 	bl	8000550 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b56:	4b24      	ldr	r3, [pc, #144]	; (8005be8 <vTaskSwitchContext+0xfc>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	fab3 f383 	clz	r3, r3
 8005b62:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005b64:	7afb      	ldrb	r3, [r7, #11]
 8005b66:	f1c3 031f 	rsb	r3, r3, #31
 8005b6a:	617b      	str	r3, [r7, #20]
 8005b6c:	491f      	ldr	r1, [pc, #124]	; (8005bec <vTaskSwitchContext+0x100>)
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	4613      	mov	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	440b      	add	r3, r1
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10b      	bne.n	8005b98 <vTaskSwitchContext+0xac>
	__asm volatile
 8005b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b84:	b672      	cpsid	i
 8005b86:	f383 8811 	msr	BASEPRI, r3
 8005b8a:	f3bf 8f6f 	isb	sy
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	b662      	cpsie	i
 8005b94:	607b      	str	r3, [r7, #4]
 8005b96:	e7fe      	b.n	8005b96 <vTaskSwitchContext+0xaa>
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4a12      	ldr	r2, [pc, #72]	; (8005bec <vTaskSwitchContext+0x100>)
 8005ba4:	4413      	add	r3, r2
 8005ba6:	613b      	str	r3, [r7, #16]
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	605a      	str	r2, [r3, #4]
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	3308      	adds	r3, #8
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d104      	bne.n	8005bc8 <vTaskSwitchContext+0xdc>
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	605a      	str	r2, [r3, #4]
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	4a05      	ldr	r2, [pc, #20]	; (8005be4 <vTaskSwitchContext+0xf8>)
 8005bd0:	6013      	str	r3, [r2, #0]
}
 8005bd2:	bf00      	nop
 8005bd4:	3720      	adds	r7, #32
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	200000d8 	.word	0x200000d8
 8005be0:	200000cc 	.word	0x200000cc
 8005be4:	20000028 	.word	0x20000028
 8005be8:	200000c4 	.word	0x200000c4
 8005bec:	2000002c 	.word	0x2000002c

08005bf0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bf6:	4b0c      	ldr	r3, [pc, #48]	; (8005c28 <prvResetNextTaskUnblockTime+0x38>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d104      	bne.n	8005c0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c00:	4b0a      	ldr	r3, [pc, #40]	; (8005c2c <prvResetNextTaskUnblockTime+0x3c>)
 8005c02:	f04f 32ff 	mov.w	r2, #4294967295
 8005c06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c08:	e008      	b.n	8005c1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c0a:	4b07      	ldr	r3, [pc, #28]	; (8005c28 <prvResetNextTaskUnblockTime+0x38>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	4a04      	ldr	r2, [pc, #16]	; (8005c2c <prvResetNextTaskUnblockTime+0x3c>)
 8005c1a:	6013      	str	r3, [r2, #0]
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	200000b8 	.word	0x200000b8
 8005c2c:	200000d4 	.word	0x200000d4

08005c30 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c30:	4b07      	ldr	r3, [pc, #28]	; (8005c50 <pxCurrentTCBConst2>)
 8005c32:	6819      	ldr	r1, [r3, #0]
 8005c34:	6808      	ldr	r0, [r1, #0]
 8005c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c3a:	f380 8809 	msr	PSP, r0
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	f04f 0000 	mov.w	r0, #0
 8005c46:	f380 8811 	msr	BASEPRI, r0
 8005c4a:	4770      	bx	lr
 8005c4c:	f3af 8000 	nop.w

08005c50 <pxCurrentTCBConst2>:
 8005c50:	20000028 	.word	0x20000028
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c54:	bf00      	nop
 8005c56:	bf00      	nop
	...

08005c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c60:	f3ef 8009 	mrs	r0, PSP
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	4b15      	ldr	r3, [pc, #84]	; (8005cc0 <pxCurrentTCBConst>)
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	f01e 0f10 	tst.w	lr, #16
 8005c70:	bf08      	it	eq
 8005c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c7a:	6010      	str	r0, [r2, #0]
 8005c7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c84:	b672      	cpsid	i
 8005c86:	f380 8811 	msr	BASEPRI, r0
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	b662      	cpsie	i
 8005c94:	f7ff ff2a 	bl	8005aec <vTaskSwitchContext>
 8005c98:	f04f 0000 	mov.w	r0, #0
 8005c9c:	f380 8811 	msr	BASEPRI, r0
 8005ca0:	bc09      	pop	{r0, r3}
 8005ca2:	6819      	ldr	r1, [r3, #0]
 8005ca4:	6808      	ldr	r0, [r1, #0]
 8005ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005caa:	f01e 0f10 	tst.w	lr, #16
 8005cae:	bf08      	it	eq
 8005cb0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005cb4:	f380 8809 	msr	PSP, r0
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop

08005cc0 <pxCurrentTCBConst>:
 8005cc0:	20000028 	.word	0x20000028
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005cc4:	bf00      	nop
 8005cc6:	bf00      	nop

08005cc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	b672      	cpsid	i
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	b662      	cpsie	i
 8005ce2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ce4:	f7ff fe48 	bl	8005978 <xTaskIncrementTick>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005cee:	4b06      	ldr	r3, [pc, #24]	; (8005d08 <SysTick_Handler+0x40>)
 8005cf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d00:	bf00      	nop
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	e000ed04 	.word	0xe000ed04

08005d0c <__libc_init_array>:
 8005d0c:	b570      	push	{r4, r5, r6, lr}
 8005d0e:	4e0d      	ldr	r6, [pc, #52]	; (8005d44 <__libc_init_array+0x38>)
 8005d10:	4c0d      	ldr	r4, [pc, #52]	; (8005d48 <__libc_init_array+0x3c>)
 8005d12:	1ba4      	subs	r4, r4, r6
 8005d14:	10a4      	asrs	r4, r4, #2
 8005d16:	2500      	movs	r5, #0
 8005d18:	42a5      	cmp	r5, r4
 8005d1a:	d109      	bne.n	8005d30 <__libc_init_array+0x24>
 8005d1c:	4e0b      	ldr	r6, [pc, #44]	; (8005d4c <__libc_init_array+0x40>)
 8005d1e:	4c0c      	ldr	r4, [pc, #48]	; (8005d50 <__libc_init_array+0x44>)
 8005d20:	f000 f828 	bl	8005d74 <_init>
 8005d24:	1ba4      	subs	r4, r4, r6
 8005d26:	10a4      	asrs	r4, r4, #2
 8005d28:	2500      	movs	r5, #0
 8005d2a:	42a5      	cmp	r5, r4
 8005d2c:	d105      	bne.n	8005d3a <__libc_init_array+0x2e>
 8005d2e:	bd70      	pop	{r4, r5, r6, pc}
 8005d30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d34:	4798      	blx	r3
 8005d36:	3501      	adds	r5, #1
 8005d38:	e7ee      	b.n	8005d18 <__libc_init_array+0xc>
 8005d3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d3e:	4798      	blx	r3
 8005d40:	3501      	adds	r5, #1
 8005d42:	e7f2      	b.n	8005d2a <__libc_init_array+0x1e>
 8005d44:	08005db0 	.word	0x08005db0
 8005d48:	08005db0 	.word	0x08005db0
 8005d4c:	08005db0 	.word	0x08005db0
 8005d50:	08005db4 	.word	0x08005db4

08005d54 <memset>:
 8005d54:	4402      	add	r2, r0
 8005d56:	4603      	mov	r3, r0
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d100      	bne.n	8005d5e <memset+0xa>
 8005d5c:	4770      	bx	lr
 8005d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d62:	e7f9      	b.n	8005d58 <memset+0x4>

08005d64 <strcpy>:
 8005d64:	4603      	mov	r3, r0
 8005d66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d6a:	f803 2b01 	strb.w	r2, [r3], #1
 8005d6e:	2a00      	cmp	r2, #0
 8005d70:	d1f9      	bne.n	8005d66 <strcpy+0x2>
 8005d72:	4770      	bx	lr

08005d74 <_init>:
 8005d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d76:	bf00      	nop
 8005d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d7a:	bc08      	pop	{r3}
 8005d7c:	469e      	mov	lr, r3
 8005d7e:	4770      	bx	lr

08005d80 <_fini>:
 8005d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d82:	bf00      	nop
 8005d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d86:	bc08      	pop	{r3}
 8005d88:	469e      	mov	lr, r3
 8005d8a:	4770      	bx	lr
